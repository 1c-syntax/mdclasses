import json
import os
import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict

def load_and_analyze():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""

    old_file = 'benchmark-results/old-results.json'
    new_file = 'benchmark-results/new-results.json'

    print("üîç –ó–ê–ì–†–£–ó–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(old_file, 'r') as f:
        old_data = json.load(f)
    with open(new_file, 'r') as f:
        new_data = json.load(f)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    performance_data = []
    memory_data = []
    gc_data = []

    for old_bench, new_bench in zip(old_data, new_data):
        bench_name = old_bench['benchmark'].split('.')[-1]

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        old_time = old_bench['primaryMetric']['score']
        new_time = new_bench['primaryMetric']['score']
        change = ((old_time - new_time) / old_time) * 100

        performance_data.append({
            'name': bench_name,
            'old': old_time,
            'new': new_time,
            'change': change
        })

        # –ü–∞–º—è—Ç—å –∏ GC –∏–∑ secondaryMetrics - –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø
        old_secondary = old_bench.get('secondaryMetrics', {})
        new_secondary = new_bench.get('secondaryMetrics', {})

        print(f"\nüìã –ë–µ–Ω—á–º–∞—Ä–∫: {bench_name}")
        print(f"   –í—Ç–æ—Ä–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {len(old_secondary)}")

        for metric_name, old_metric in old_secondary.items():
            if metric_name in new_secondary:
                new_metric = new_secondary[metric_name]

                # –ü–†–û–°–¢–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø - —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫
                print(f"   üîç –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫–∏: '{metric_name}'")

                # –ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏ - –±–µ—Ä–µ–º –í–°–ï –º–µ—Ç—Ä–∏–∫–∏ –∫—Ä–æ–º–µ gc
                if 'gc.' not in metric_name and ('memory' in metric_name or 'usedmemory' in metric_name.lower()):
                    memory_data.append({
                        'benchmark': bench_name,
                        'metric': metric_name,
                        'short_metric': metric_name.split('.')[-1],
                        'category': get_memory_category(metric_name),
                        'old': old_metric['score'],
                        'new': new_metric['score'],
                        'unit': old_metric.get('scoreUnit', ''),
                        'change': ((old_metric['score'] - new_metric['score']) / old_metric['score']) * 100 if old_metric['score'] != 0 else 0
                    })
                    print(f"      ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –í –ü–ê–ú–Ø–¢–¨: {old_metric['score']} ‚Üí {new_metric['score']}")

                # –ú–µ—Ç—Ä–∏–∫–∏ GC
                elif 'gc.' in metric_name:
                    gc_data.append({
                        'benchmark': bench_name,
                        'metric': metric_name,
                        'short_metric': metric_name.split('.')[-1],
                        'old': old_metric['score'],
                        'new': new_metric['score'],
                        'unit': old_metric.get('scoreUnit', ''),
                        'change': ((old_metric['score'] - new_metric['score']) / old_metric['score']) * 100 if old_metric['score'] != 0 else 0
                    })
                    print(f"      ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –í GC: {old_metric['score']} ‚Üí {new_metric['score']}")
                else:
                    print(f"      ‚ùì –ù–ï –û–ü–†–ï–î–ï–õ–ï–ù–û: {metric_name}")

    print(f"\nüìä –ò–¢–û–ì–û –ò–ó–í–õ–ï–ß–ï–ù–û:")
    print(f"üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(performance_data)}")
    print(f"üß† –ü–∞–º—è—Ç—å: {len(memory_data)}")
    print(f"üóëÔ∏è  GC: {len(gc_data)}")

    # –ü–æ–∫–∞–∂–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
    if memory_data:
        print(f"\nüìã –í–°–ï –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏:")
        memory_metrics = set(item['metric'] for item in memory_data)
        for i, metric in enumerate(memory_metrics):
            print(f"   {i+1}. {metric}")

    return performance_data, memory_data, gc_data

def get_memory_category(metric_name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏"""
    metric_lower = metric_name.lower()
    if 'heap' in metric_lower:
        return 'heap'
    elif 'nonheap' in metric_lower:
        return 'nonheap'
    elif 'total' in metric_lower:
        return 'total'
    elif 'pool' in metric_lower:
        return 'pool'
    elif 'usedmemory' in metric_lower:
        return 'usedmemory'
    else:
        return 'other'

def add_value_labels(ax, bars, values, format_str='{:.1f}', offset_factor=0.01):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã –≥—Ä–∞—Ñ–∏–∫–∞"""
    for bar, value in zip(bars, values):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + abs(height) * offset_factor,
                format_str.format(value),
                ha='center', va='bottom', fontsize=8, fontweight='bold')

def add_comparison_labels(ax, bars1, bars2, values1, values2, format_str='{:.1f}'):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–≤—É—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ (—Å—Ç–∞—Ä–∞—è/–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for bar, value in zip(bars1, values1):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height/2,
                format_str.format(value),
                ha='center', va='center', fontsize=8, fontweight='bold', color='white')

    # –î–ª—è –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for bar, value in zip(bars2, values2):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height/2,
                format_str.format(value),
                ha='center', va='center', fontsize=8, fontweight='bold', color='white')

def create_visualizations(performance_data, memory_data, gc_data):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö"""

    fig = plt.figure(figsize=(16, 12))
    fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏', fontsize=16, fontweight='bold')

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏, —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    if not memory_data and not gc_data:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏ –∏ GC, —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")

        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if performance_data:
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            ax1 = plt.subplot(1, 2, 1)
            names = [p['name'] for p in performance_data]
            old_times = [p['old'] for p in performance_data]
            new_times = [p['new'] for p in performance_data]

            x = np.arange(len(names))
            width = 0.35

            bars1 = ax1.bar(x - width/2, old_times, width, label='–°—Ç–∞—Ä–∞—è', alpha=0.7, color='blue')
            bars2 = ax1.bar(x + width/2, new_times, width, label='–ù–æ–≤–∞—è', alpha=0.7, color='orange')
            ax1.set_title('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤—Ä–µ–º—è, –º—Å)', fontsize=12, fontweight='bold')
            ax1.set_ylabel('–í—Ä–µ–º—è (–º—Å)')
            ax1.set_xticks(x)
            ax1.set_xticklabels(names, rotation=45, ha='right')
            ax1.legend()
            ax1.grid(True, alpha=0.3)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            add_comparison_labels(ax1, bars1, bars2, old_times, new_times, '{:.1f}ms')

        # –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if performance_data:
            ax2 = plt.subplot(1, 2, 2)
            changes = [p['change'] for p in performance_data]
            colors = ['green' if c > 0 else 'red' for c in changes]

            bars = ax2.bar(names, changes, color=colors, alpha=0.7)
            ax2.set_title('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (%)', fontsize=12, fontweight='bold')
            ax2.set_ylabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)')
            ax2.set_xticklabels(names, rotation=45, ha='right')
            ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
            ax2.grid(True, alpha=0.3)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            add_value_labels(ax2, bars, changes, '{:+.1f}%')

        plt.tight_layout()
        plt.savefig('benchmark-results/performance-only.png', dpi=150, bbox_inches='tight')
        plt.show()
        return

    # –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–∞–º—è—Ç—å—é –∏ GC

    # 1. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if performance_data:
        ax1 = plt.subplot(2, 3, 1)
        names = [p['name'] for p in performance_data]
        old_times = [p['old'] for p in performance_data]
        new_times = [p['new'] for p in performance_data]

        x = np.arange(len(names))
        width = 0.35

        bars1 = ax1.bar(x - width/2, old_times, width, label='–°—Ç–∞—Ä–∞—è', alpha=0.7, color='blue')
        bars2 = ax1.bar(x + width/2, new_times, width, label='–ù–æ–≤–∞—è', alpha=0.7, color='orange')
        ax1.set_title('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤—Ä–µ–º—è)', fontsize=12, fontweight='bold')
        ax1.set_ylabel('–í—Ä–µ–º—è (–º—Å)')
        ax1.set_xticks(x)
        ax1.set_xticklabels(names, rotation=45, ha='right')
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        add_comparison_labels(ax1, bars1, bars2, old_times, new_times, '{:.1f}ms')

    # 2. –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if performance_data:
        ax2 = plt.subplot(2, 3, 2)
        changes = [p['change'] for p in performance_data]
        colors = ['green' if c > 0 else 'red' for c in changes]

        bars = ax2.bar(names, changes, color=colors, alpha=0.7)
        ax2.set_title('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', fontsize=12, fontweight='bold')
        ax2.set_ylabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)')
        ax2.set_xticklabels(names, rotation=45, ha='right')
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax2.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        add_value_labels(ax2, bars, changes, '{:+.1f}%')

    # 3. –ì—Ä–∞—Ñ–∏–∫ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–∞–º—è—Ç–∏
    if memory_data:
        ax3 = plt.subplot(2, 3, 3)

        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        key_metrics = ['usedMemory.heap', 'usedMemory.total', 'memory.heap.used', 'memory.total.used']
        display_data = []

        for metric_name in key_metrics:
            for item in memory_data:
                if item['metric'] == metric_name:
                    display_data.append(item)
                    break

        # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4
        if not display_data:
            display_data = memory_data[:4]

        metric_labels = [f"{item['short_metric']}\n({item['benchmark']})" for item in display_data]
        old_values = [item['old'] for item in display_data]
        new_values = [item['new'] for item in display_data]
        units = [item['unit'] for item in display_data]

        x = np.arange(len(metric_labels))
        width = 0.35

        bars1 = ax3.bar(x - width/2, old_values, width, label='–°—Ç–∞—Ä–∞—è', alpha=0.7, color='blue')
        bars2 = ax3.bar(x + width/2, new_values, width, label='–ù–æ–≤–∞—è', alpha=0.7, color='orange')
        ax3.set_title('–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏', fontsize=12, fontweight='bold')
        ax3.set_ylabel(f'–ü–∞–º—è—Ç—å ({units[0] if units else "MB"})')
        ax3.set_xticks(x)
        ax3.set_xticklabels(metric_labels, rotation=45, ha='right')
        ax3.legend()
        ax3.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        add_comparison_labels(ax3, bars1, bars2, old_values, new_values, '{:.1f}')

    else:
        ax3 = plt.subplot(2, 3, 3)
        ax3.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏',
                ha='center', va='center', transform=ax3.transAxes, fontsize=12)
        ax3.set_title('–ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏', fontsize=12, fontweight='bold')

    # 4. –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞–º—è—Ç–∏
    if memory_data:
        ax4 = plt.subplot(2, 3, 4)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —É—Å—Ä–µ–¥–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        categories = defaultdict(list)
        for item in memory_data:
            categories[item['category']].append(item['change'])

        avg_changes = {cat: sum(changes)/len(changes) for cat, changes in categories.items()}

        if avg_changes:
            cat_names = list(avg_changes.keys())
            changes = list(avg_changes.values())
            colors = ['green' if c > 0 else 'red' for c in changes]

            bars = ax4.bar(cat_names, changes, color=colors, alpha=0.7)
            ax4.set_title('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=12, fontweight='bold')
            ax4.set_ylabel('–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (%)')
            ax4.set_xticklabels(cat_names, rotation=45, ha='right')
            ax4.axhline(y=0, color='black', linestyle='-', alpha=0.3)
            ax4.grid(True, alpha=0.3)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            add_value_labels(ax4, bars, changes, '{:+.1f}%')

    else:
        ax4 = plt.subplot(2, 3, 4)
        ax4.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏',
                ha='center', va='center', transform=ax4.transAxes, fontsize=12)
        ax4.set_title('–ü–∞–º—è—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=12, fontweight='bold')

    # 5. –ì—Ä–∞—Ñ–∏–∫ GC –º–µ—Ç—Ä–∏–∫
    if gc_data:
        ax5 = plt.subplot(2, 3, 5)

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –º–µ—Ç—Ä–∏–∫–∏ GC
        display_gc = gc_data[:4]

        metric_labels = [f"{item['short_metric']}\n({item['benchmark']})" for item in display_gc]
        old_values = [item['old'] for item in display_gc]
        new_values = [item['new'] for item in display_gc]
        units = [item['unit'] for item in display_gc]

        x = np.arange(len(metric_labels))
        width = 0.35

        bars1 = ax5.bar(x - width/2, old_values, width, label='–°—Ç–∞—Ä–∞—è', alpha=0.7, color='blue')
        bars2 = ax5.bar(x + width/2, new_values, width, label='–ù–æ–≤–∞—è', alpha=0.7, color='orange')
        ax5.set_title('–ú–µ—Ç—Ä–∏–∫–∏ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞', fontsize=12, fontweight='bold')
        ax5.set_ylabel(f'–ó–Ω–∞—á–µ–Ω–∏–µ ({units[0] if units else ""})')
        ax5.set_xticks(x)
        ax5.set_xticklabels(metric_labels, rotation=45, ha='right')
        ax5.legend()
        ax5.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        add_comparison_labels(ax5, bars1, bars2, old_values, new_values, '{:.1f}')

    else:
        ax5 = plt.subplot(2, 3, 5)
        ax5.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö GC',
                ha='center', va='center', transform=ax5.transAxes, fontsize=12)
        ax5.set_title('–ú–µ—Ç—Ä–∏–∫–∏ GC', fontsize=12, fontweight='bold')

    # 6. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ax6 = plt.subplot(2, 3, 6)
    ax6.axis('off')  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Å–∏

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = "üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
    stats_text += f"–í—Å–µ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {len(performance_data)}\n\n"

    if performance_data:
        perf_improvements = sum(1 for p in performance_data if p['change'] > 5)
        perf_regressions = sum(1 for p in performance_data if p['change'] < -5)
        avg_perf_change = sum(p['change'] for p in performance_data) / len(performance_data)
        stats_text += f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n"
        stats_text += f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–π: {perf_improvements}\n"
        stats_text += f"‚Ä¢ –£—Ö—É–¥—à–µ–Ω–∏–π: {perf_regressions}\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {avg_perf_change:+.1f}%\n\n"

    if memory_data:
        mem_improvements = sum(1 for m in memory_data if m['change'] > 5)
        mem_regressions = sum(1 for m in memory_data if m['change'] < -5)
        avg_mem_change = sum(m['change'] for m in memory_data) / len(memory_data)
        stats_text += f"–ü–∞–º—è—Ç—å:\n"
        stats_text += f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–π: {mem_improvements}\n"
        stats_text += f"‚Ä¢ –£—Ö—É–¥—à–µ–Ω–∏–π: {mem_regressions}\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {avg_mem_change:+.1f}%\n\n"

    if gc_data:
        gc_improvements = sum(1 for g in gc_data if g['change'] < 0)
        gc_regressions = sum(1 for g in gc_data if g['change'] > 0)
        avg_gc_change = sum(g['change'] for g in gc_data) / len(gc_data)
        stats_text += f"–°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞:\n"
        stats_text += f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–π: {gc_improvements}\n"
        stats_text += f"‚Ä¢ –£—Ö—É–¥—à–µ–Ω–∏–π: {gc_regressions}\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {avg_gc_change:+.1f}%"

    ax6.text(0.1, 0.9, stats_text, transform=ax6.transAxes, fontsize=10,
             verticalalignment='top', linespacing=1.5, fontweight='bold')

    plt.tight_layout()
    plt.savefig('benchmark-results/comprehensive-analysis-with-values.png', dpi=150, bbox_inches='tight')
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: benchmark-results/comprehensive-analysis-with-values.png")
    plt.show()

if __name__ == "__main__":
    performance_data, memory_data, gc_data = load_and_analyze()
    create_visualizations(performance_data, memory_data, gc_data)
