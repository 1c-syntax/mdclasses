&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем МетаданныеДанных, Шаблон, СуществуетВерсияДоИзменения, ЗначениеСвойства, РазличияТабличнойЧасти, ОтборВерсии,
		ИндексДаты, ИндексИмениПользователя, ИндексПолногоИмениПользователя, ИндексКомментария,
		ВерсияДоИзменения, ВерсияПослеИзменения, Различия, МетаданныеВерсии, ПустаяЯчейка, ПустаяСтрока,
		ОбластьЗаголовкаВерсии, ОбластьВерсии, ИмяПользователя, ОбластьЗаголовкаКомментария, ОбластьКомменатрия,
		ИменаТабличныхЧастей, ПредставленияТабличныхЧастей, ИмяТабличнойЧасти,
		МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ПолеНайдено, ИмяПоля, РазличияЗначенияПоля, ИменаПолейБезДоступа,
		ОбластьПредставленияПоля, ОбластьЗначенияПослеИзменения, ОбластьЗначенияДоИзменения,
		МетаданныеВерсииТабличныеЧасти, ТабличныеЧасти, МетаданныеТабличнаяЧасть,
		МетаданныеВерсииТабличнаяЧасть, ОбластьПредставленияТабличнойЧасти, ОбластьСтроки, ОбластьНомераСтроки, ОбластьЛегенды,
		ИндексПоля, ИндексТабличнойЧасти, ИндексПоляНомерСтроки;
	
	МетаданныеДанных = Параметры.Данные.Метаданные();
	
	Если Не ПравоДоступа("ПросмотрИсторииДанных", МетаданныеДанных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Шаблон = Новый ТабличныйДокумент;
	Шаблон.Прочитать("v8res://mngbase/DataHistoryVersionDifferencesRuTemplate.mxl");
	Отчет.Очистить();
	
	СуществуетВерсияДоИзменения = Параметры.НомерВерсииДоИзменения <> Неопределено;
	Если СуществуетВерсияДоИзменения Тогда
		ОтборВерсии = Новый Структура;
		ОтборВерсии.Вставить("Данные", Параметры.Данные);
		ОтборВерсии.Вставить("НомерВерсии", Параметры.НомерВерсииДоИзменения);

		ВерсияДоИзменения = ИсторияДанных.ВыбратьВерсии(ОтборВерсии, "Дата, ИмяПользователя, ПолноеИмяПользователя, Комментарий", , )[0];
	КонецЕсли;
	
	ОтборВерсии = Новый Структура;
	ОтборВерсии.Вставить("Данные", Параметры.Данные);
	ОтборВерсии.Вставить("НомерВерсии", Параметры.НомерВерсииПослеИзменения);
	ИндексДаты = 0;
	ИндексИмениПользователя = 1;
	ИндексПолногоИмениПользователя = 2;
	ИндексКомментария = 3;
	
	Заголовок = СтрШаблон(НСтр("ru = '%1 (Различия версий %2 и %3)'; SYS = 'DataHistory.DiffTitle'", "ru"),
		ПолучитьПредставлениеДанных(МетаданныеДанных, Параметры.Данные),
		Строка(Параметры.НомерВерсииПослеИзменения),
		Строка(Параметры.НомерВерсииДоИзменения));
		
	ВерсияПослеИзменения = ИсторияДанных.ВыбратьВерсии(ОтборВерсии, "Дата, ИмяПользователя, ПолноеИмяПользователя, Комментарий", , )[0];
	
	Различия = ИсторияДанных.ПолучитьРазличияВерсий(Параметры.Данные, Параметры.НомерВерсииПослеИзменения, Параметры.НомерВерсииДоИзменения);
	
	МетаданныеВерсии = ИсторияДанных.ПолучитьМетаданные(Параметры.Данные, Параметры.НомерВерсииПослеИзменения);
	
	ПустаяЯчейка = Шаблон.ПолучитьОбласть("ПустаяЯчейка");
	ПустаяСтрока = Шаблон.ПолучитьОбласть("ПустаяСтрока");
	
	Отчет.Вывести(ПустаяЯчейка);
	Отчет.Присоединить(Шаблон.ПолучитьОбласть("ЗаголовокПосле"));
	Если СуществуетВерсияДоИзменения Тогда
		Отчет.Присоединить(Шаблон.ПолучитьОбласть("ЗаголовокДо"));
	КонецЕсли;
			
	ОбластьЗаголовкаВерсии = Шаблон.ПолучитьОбласть("ЗаголовокВерсии");
	МетаданныеВерсии.Свойство("Представление", ОбластьЗаголовкаВерсии.Параметры.ПредставлениеМетаданных);
	Отчет.Вывести(ОбластьЗаголовкаВерсии);
	
	ОбластьВерсии = Шаблон.ПолучитьОбласть("Версия");
	ОбластьВерсии.Параметры.НомерВерсии = Параметры.НомерВерсииПослеИзменения;
	
	ОбластьВерсии.Параметры.Дата = ВерсияПослеИзменения[ИндексДаты];
	ИмяПользователя = ВерсияПослеИзменения[ИндексПолногоИмениПользователя];
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = ВерсияПослеИзменения[ИндексИмениПользователя]
	КонецЕсли;
	ОбластьВерсии.Параметры.ИмяПользователя = ИмяПользователя;
	
	Отчет.Присоединить(ОбластьВерсии);
	Если СуществуетВерсияДоИзменения Тогда
		ОбластьВерсии = Шаблон.ПолучитьОбласть("Версия");
		ОбластьВерсии.Параметры.НомерВерсии = Параметры.НомерВерсииДоИзменения;
		
		ОбластьВерсии.Параметры.Дата = ВерсияДоИзменения[ИндексДаты];
		ИмяПользователя = ВерсияДоИзменения[ИндексПолногоИмениПользователя];
		Если ПустаяСтрока(ИмяПользователя) Тогда
			ИмяПользователя = ВерсияДоИзменения[ИндексИмениПользователя]
		КонецЕсли;
		ОбластьВерсии.Параметры.ИмяПользователя = ИмяПользователя;
		Отчет.Присоединить(ОбластьВерсии);
	КонецЕсли;
	
	Если Не (ПустаяСтрока(ВерсияПослеИзменения[ИндексКомментария])
		И  (Не СуществуетВерсияДоИзменения
			Или ПустаяСтрока(ВерсияДоИзменения[ИндексКомментария]))) Тогда
	
		ОбластьЗаголовкаКомментария = Шаблон.ПолучитьОбласть("ЗаголовокКомментария");
		Отчет.Вывести(ОбластьЗаголовкаКомментария);
		
		Если  Не ПустаяСтрока(ВерсияПослеИзменения[ИндексКомментария]) Тогда
			ОбластьКомменатрия = Шаблон.ПолучитьОбласть("Комментарий");
			ОбластьКомменатрия.Параметры.Комментарий = ВерсияПослеИзменения[2];
			Отчет.Присоединить(ОбластьКомменатрия);
		Иначе
			Отчет.Присоединить(ПустаяЯчейка);
		КонецЕсли;
		
		Если  СуществуетВерсияДоИзменения
			И Не ПустаяСтрока(ВерсияДоИзменения[2]) Тогда
			ОбластьКомменатрия = Шаблон.ПолучитьОбласть("Комментарий");
			ОбластьКомменатрия.Параметры.Комментарий = ВерсияДоИзменения[2];
			Отчет.Присоединить(ОбластьКомменатрия);	
		КонецЕсли;
	КонецЕсли;
	Отчет.Вывести(ПустаяСтрока);
	
	Если МетаданныеВерсии.Свойство("Поля", МетаданныеВерсииПоля) Тогда
		ИменаПолей = Новый Массив;
		ПредставленияПолей = Новый Массив;
		ИменаПолейБезДоступа = Новый Массив;

		ОпределитьОтображаемыеПоляДанных(
			МетаданныеДанных,
			МетаданныеВерсииПоля,
			ИменаПолей,
			ПредставленияПолей,
			ИменаПолейБезДоступа);
			
		ПолеНайдено = Ложь;
		Для Каждого ИмяПоля Из ИменаПолей Цикл
			Если Различия.Свойство(ИмяПоля, ЗначениеСвойства) Тогда
				ПолеНайдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПолеНайдено Тогда
			Для ИндексПоля = 0 To ИменаПолей.Количество() - 1 Цикл
				ИмяПоля = ИменаПолей[ИндексПоля];

				Если Различия.Свойство(ИмяПоля, ЗначениеСвойства) Тогда
					РазличияЗначенияПоля = ЗначениеСвойства;
					
					ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
					ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
					Отчет.Вывести(ОбластьПредставленияПоля);
					
					Если Не СуществуетВерсияДоИзменения Тогда
						ОбластьЗначенияПослеИзменения = Шаблон.ПолучитьОбласть("СозданиеЗначенияПоля");
					Иначе 
						ОбластьЗначенияПослеИзменения = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
					КонецЕсли;
					
					Если РазличияЗначенияПоля.Свойство("ЗначениеПослеИзменения", ЗначениеСвойства) Тогда
						УстановитьЗначениеПоля(ОбластьЗначенияПослеИзменения.Параметры, ЗначениеСвойства);
					КонецЕсли;
					Отчет.Присоединить(ОбластьЗначенияПослеИзменения);
					
					Если СуществуетВерсияДоИзменения Тогда
						ОбластьЗначенияДоИзменения = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
						Если РазличияЗначенияПоля.Свойство("ЗначениеДоИзменения", ЗначениеСвойства) Тогда
							УстановитьЗначениеПоля(ОбластьЗначенияДоИзменения.Параметры, ЗначениеСвойства);
						КонецЕсли;
						Отчет.Присоединить(ОбластьЗначенияДоИзменения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Отчет.Вывести(ПустаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеВерсии.Свойство("ТабличныеЧасти", МетаданныеВерсииТабличныеЧасти) Тогда
		ИменаТабличныхЧастей = Новый Массив;
		ПредставленияТабличныхЧастей = Новый Массив;
		
		ОпределитьОтображаемыеТабличныеЧасти(
			МетаданныеДанных,
			МетаданныеВерсииТабличныеЧасти,
			ИменаТабличныхЧастей,
			ПредставленияТабличныхЧастей);
			
		
		Для ИндексТабличнойЧасти = 0 По ИменаТабличныхЧастей.Количество() - 1 Цикл

			ИмяТабличнойЧасти = ИменаТабличныхЧастей[ИндексТабличнойЧасти];
			Если Не МетаданныеВерсииТабличныеЧасти.Свойство(ИмяТабличнойЧасти, МетаданныеВерсииТабличнаяЧасть) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не МетаданныеВерсииТабличнаяЧасть.Свойство("Поля", МетаданныеВерсииПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаПолей = ПредставленияТабличныхЧастей[ИндексТабличнойЧасти].ИменаПолей;
			ПредставленияПолей = ПредставленияТабличныхЧастей[ИндексТабличнойЧасти].ПредставленияПолей;
			
			Если ИменаПолей.Количество() = 0 then
				Продолжить;
			КонецЕсли;

			Если Не Различия.Свойство(ИмяТабличнойЧасти, РазличияТабличнойЧасти) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьПредставленияТабличнойЧасти = Шаблон.ПолучитьОбласть("ПредставлениеТабличнойЧасти");
			МетаданныеВерсииТабличнаяЧасть.Свойство("Представление", ОбластьПредставленияТабличнойЧасти.Параметры.ПредставлениеТабличнойЧасти);
			Отчет.Вывести(ОбластьПредставленияТабличнойЧасти);
			
			Для Каждого СтрокаТабличнойЧасти Из РазличияТабличнойЧасти Цикл
				
				Если СтрокаТабличнойЧасти.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Добавление Тогда
					ОбластьСтроки = Шаблон.ПолучитьОбласть("СозданиеСтрокиТабличнойЧасти");
					Отчет.Вывести(ОбластьСтроки);
					
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииПослеИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);
					
					Для ИндексПоля = 0 To ИменаПолей.Количество() - 1 Цикл
						ИмяПоля = ИменаПолей[ИндексПоля];
						ПоляСтроки = Неопределено;
						Если Не СтрокаТабличнойЧасти.Свойство("Поля", ПоляСтроки) Тогда
							Продолжить;
						КонецЕсли;
						
						РазличияЗначенияПоля = Неопределено;
						Если ПоляСтроки.Свойство(ИмяПоля, РазличияЗначенияПоля) Тогда 
							ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
							ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
							Отчет.Вывести(ОбластьПредставленияПоля);
							
							ОбластьЗначенияПослеИзменения = Шаблон.ПолучитьОбласть("СозданиеЗначенияПоля");
							УстановитьЗначениеПоля(ОбластьЗначенияПослеИзменения.Параметры, РазличияЗначенияПоля);
							Отчет.Присоединить(ОбластьЗначенияПослеИзменения);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаТабличнойЧасти.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Изменение Тогда
					ОбластьСтроки = Шаблон.ПолучитьОбласть("ИзменениеСтрокиТабличнойЧасти");
					Отчет.Вывести(ОбластьСтроки);
					
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииПослеИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);

					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииДоИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);

					Для ИндексПоля = 0 To ИменаПолей.Количество() - 1 Цикл
						ИмяПоля = ИменаПолей[ИндексПоля];
						ПоляСтроки = Неопределено;
						Если Не СтрокаТабличнойЧасти.Свойство("Поля", ПоляСтроки) Тогда
							Продолжить;
						КонецЕсли;
						РазличияЗначенияПоля = Неопределено;
						Если ПоляСтроки.Свойство(ИмяПоля, РазличияЗначенияПоля) Тогда 
							ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
							ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
							Отчет.Вывести(ОбластьПредставленияПоля);
							
							ОбластьЗначенияПослеИзменения = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
							РазличияЗначенияПоля.Свойство("ЗначениеПослеИзменения", ЗначениеСвойства);
							УстановитьЗначениеПоля(ОбластьЗначенияПослеИзменения.Параметры, ЗначениеСвойства);
							Отчет.Присоединить(ОбластьЗначенияПослеИзменения);
							
							ОбластьЗначенияДоИзменения = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
							РазличияЗначенияПоля.Свойство("ЗначениеДоИзменения", ЗначениеСвойства);
							УстановитьЗначениеПоля(ОбластьЗначенияДоИзменения.Параметры, ЗначениеСвойства);
							Отчет.Присоединить(ОбластьЗначенияДоИзменения);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаТабличнойЧасти.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Удаление Тогда
					ОбластьСтроки = Шаблон.ПолучитьОбласть("УдалениеСтрокиТабличнойЧасти");
					Отчет.Вывести(ОбластьСтроки);
					Отчет.Присоединить(ПустаяЯчейка);

					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииДоИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);
					
					Для ИндексПоля = 0 To ИменаПолей.Количество() - 1 Цикл
						ИмяПоля = ИменаПолей[ИндексПоля];
						ПоляСтроки = Неопределено;
						Если Не СтрокаТабличнойЧасти.Свойство("Поля", ПоляСтроки) Тогда
							Продолжить;
						КонецЕсли;
						
						РазличияЗначенияПоля = Неопределено;
						Если ПоляСтроки.Свойство(ИмяПоля, РазличияЗначенияПоля) Тогда 
							ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
							ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
							Отчет.Вывести(ОбластьПредставленияПоля);
							
							Отчет.Присоединить(ПустаяЯчейка);
							
							ОбластьЗначенияДоИзменения = Шаблон.ПолучитьОбласть("УдалениеЗначенияПоля");
							УстановитьЗначениеПоля(ОбластьЗначенияДоИзменения.Параметры, РазличияЗначенияПоля);
							Отчет.Присоединить(ОбластьЗначенияДоИзменения);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли СтрокаТабличнойЧасти.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Перемещение Тогда
					ОбластьСтроки = Шаблон.ПолучитьОбласть("ПеремещениеСтрокиТабличнойЧасти");
					Отчет.Вывести(ОбластьСтроки);
					
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииПослеИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);
					
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("НомерСтроки");
					СтрокаТабличнойЧасти.Свойство("НомерСтрокиВВерсииДоИзменения", ОбластьНомераСтроки.Параметры.НомерСтроки);
					Отчет.Присоединить(ОбластьНомераСтроки);
				КонецЕсли;
				Отчет.Вывести(ПустаяСтрока);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Отчет.Вывести(ПустаяСтрока);
	ОбластьЛегенды = Шаблон.ПолучитьОбласть("Легенда");
	ОбластьЛегенды.Область("R1C1:R4C1").СоздатьФорматСтрок();
	ОбластьЛегенды.Область("R1C1:R4C1").ШиринаКолонки = 12;
	
	Отчет.Вывести(ОбластьЛегенды);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеПоляДанных(МетаданныеДанных, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Перем ПредставлениеПоля;
	Если Метаданные.Константы.Содержит(МетаданныеДанных) Тогда 
		Для Каждого ПолеВерсии Из МетаданныеВерсииПоля Цикл
			Если Метаданные.ОбщиеРеквизиты.Найти(ПолеВерсии.Ключ) = Неопределено Тогда
				ИменаПолей.Добавить(ПолеВерсии.Ключ);
				ПредставленияПолей.Добавить(ПолеВерсии.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОпределитьОтображаемыеСтандартныеРеквизиты(
			МетаданныеДанных,
			МетаданныеВерсииПоля,
			ИменаПолей,
			ПредставленияПолей,
			ИменаПолейБезДоступа);
			
		Если Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) Тогда
			ОпределитьОтображаемыеПоля(
				МетаданныеДанных.Измерения,
				МетаданныеВерсииПоля,
				ИменаПолей,
				ПредставленияПолей,
				ИменаПолейБезДоступа);
				
			ОпределитьОтображаемыеПоля(
				МетаданныеДанных.Ресурсы,
				МетаданныеВерсииПоля,
				ИменаПолей,
				ПредставленияПолей,
				ИменаПолейБезДоступа);
		КонецЕсли;
		
		ОпределитьОтображаемыеПоля(
			МетаданныеДанных.Реквизиты,
			МетаданныеВерсииПоля,
			ИменаПолей,
			ПредставленияПолей,
			ИменаПолейБезДоступа);
			
		Если Метаданные.ПланыСчетов.Содержит(МетаданныеДанных) Тогда
			ОпределитьОтображаемыеПоля(
				МетаданныеДанных.ПризнакиУчета,
				МетаданныеВерсииПоля,
				ИменаПолей,
				ПредставленияПолей,
				ИменаПолейБезДоступа);
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьОтображаемыеПоля(
		Метаданные.ОбщиеРеквизиты,
		МетаданныеВерсииПоля,
		ИменаПолей,
		ПредставленияПолей,
		ИменаПолейБезДоступа);
		
	ОпределитьОтображаемыеДополнительныеПоля(
		МетаданныеВерсииПоля,
		ИменаПолей,
		ПредставленияПолей,
		ИменаПолейБезДоступа);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемоеПоле(Поле, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Перем ПредставлениеПоля;
	Если Не ПравоДоступа("Просмотр", Поле) Тогда
		ИменаПолейБезДоступа.Добавить(Поле.Имя);
		Возврат;
	КонецЕсли;
		
	Если Не МетаданныеВерсииПоля.Свойство(Поле.Имя, ПредставлениеПоля) Тогда
		Возврат;
	КонецЕсли;
	ИменаПолей.Добавить(Поле.Имя);
	ПредставленияПолей.Добавить(ПредставлениеПоля);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеПоля(Поля, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Для Каждого Поле Из Поля Цикл
		ОпределитьОтображаемоеПоле(Поле, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеДополнительныеПоля(МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Перем НеНайденныеПоля, ПредставлениеПоля;
	НеНайденныеПоля = Новый СписокЗначений;
	Для Каждого МетаданныеВерсииПоле Из МетаданныеВерсииПоля Цикл
		Если ИменаПолей.Найти(МетаданныеВерсииПоле.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаПолейБезДоступа.Найти(МетаданныеВерсииПоле.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НеНайденныеПоля.Добавить(МетаданныеВерсииПоле.Ключ, МетаданныеВерсииПоле.Значение);
	КонецЦикла;
	НеНайденныеПоля.СортироватьПоЗначению();
	Для Каждого НеНайденноеПоле Из НеНайденныеПоля Цикл
		ИменаПолей.Добавить(НеНайденноеПоле.Значение);
		ПредставленияПолей.Добавить(НеНайденноеПоле.Представление);
	КонецЦикла;
КонецПроцедуры
	
&НаСервере
Процедура ОпределитьОтображаемыйСтандартныйРеквизит(МетаданныеДанных, Поле, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа, ИмяТабличнойЧасти = Неопределено)
	Перем ПредставлениеПоля, ПутьПоля;
	Если ИмяТабличнойЧасти = Неопределено Тогда
		ПутьПоля = Поле.Имя;
	Иначе
		ПутьПоля = ИмяТабличнойЧасти + "." + Поле.Имя;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", МетаданныеДанных, , ПутьПоля) Тогда
		ИменаПолейБезДоступа.Добавить(Поле.Имя);
		Возврат;
	КонецЕсли;
	
	Если Не МетаданныеВерсииПоля.Свойство(Поле.Имя, ПредставлениеПоля) Тогда
		Возврат;
	КонецЕсли;
	ИменаПолей.Добавить(Поле.Имя);
	ПредставленияПолей.Добавить(ПредставлениеПоля);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеСтандартныеРеквизиты(МетаданныеДанных, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Для Каждого Поле Из МетаданныеДанных.СтандартныеРеквизиты Цикл
		ОпределитьОтображаемыйСтандартныйРеквизит(
			МетаданныеДанных,
			Поле,
			МетаданныеВерсииПоля,
			ИменаПолей,
			ПредставленияПолей,
			ИменаПолейБезДоступа);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеТабличныеЧасти(МетаданныеДанных, МетаданныеВерсииТабличныеЧасти, ИменаТабличныхЧастей, ПредставленияТабличныхЧастей)
	Перем ЭтоПланСчетов, ЭтоПланВидовРасчета, 
		МетаданныеВерсииТабличнаяЧасть, МетаданныеВерсииПоляТабличнойЧасти,
		ИменаПолей, ПредставленияПолей, НеНайденныеТабличныеЧасти, ИменаПолейБезДоступа,
		ПредставлениеТабличнойЧасти, ИменаТабличныхЧастейБезДоступа;
		
	ЭтоПланСчетов = Метаданные.ПланыСчетов.Содержит(МетаданныеДанных);
	ЭтоПланВидовРасчета = Метаданные.ПланыВидовРасчета.Содержит(МетаданныеДанных);
	НеНайденныеТабличныеЧасти = Новый СписокЗначений;
	ИменаТабличныхЧастейБезДоступа = Новый Массив;
	Если ЭтоПланСчетов Или ЭтоПланВидовРасчета Тогда
		Для Каждого МетаданныеТабличнаяЧасть Из МетаданныеДанных.СтандартныеТабличныеЧасти Цикл
			
			Если Не ПравоДоступа("Просмотр", МетаданныеДанных, , МетаданныеТабличнаяЧасть.Имя) Тогда
				ИменаТабличныхЧастейБезДоступа.Добавить(МетаданныеТабличнаяЧасть.Имя);
				Продолжить;
			КонецЕсли;
			
			Если Не МетаданныеВерсииТабличныеЧасти.Свойство(МетаданныеТабличнаяЧасть.Имя, МетаданныеВерсииТабличнаяЧасть) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не МетаданныеВерсииТабличнаяЧасть.Свойство("Поля", МетаданныеВерсииПоляТабличнойЧасти) Тогда
				Продолжить;
			КонецЕсли;
			 
			ИменаПолей = Новый Массив;
			ПредставленияПолей = Новый Массив;
			ИменаПолейБезДоступа = Новый Массив;
			
			Для Каждого Поле Из МетаданныеТабличнаяЧасть.СтандартныеРеквизиты Цикл
				Если Поле.Имя = "LineNumber" Или Поле.Имя = "НомерСтроки" Тогда
					Продолжить;
				КонецЕсли;
			
				ОпределитьОтображаемыйСтандартныйРеквизит(
					МетаданныеДанных,
					Поле,
					МетаданныеВерсииПоляТабличнойЧасти,
					ИменаПолей,
					ПредставленияПолей,
					ИменаПолейБезДоступа,
					МетаданныеТабличнаяЧасть.Имя);

			КонецЦикла;
			
		    Если ЭтоПланСчетов Тогда 
				Для Каждого Поле Из МетаданныеДанных.ПризнакиУчетаСубконто Цикл
					ОпределитьОтображаемоеПоле(
						Поле,
						МетаданныеВерсииПоляТабличнойЧасти,
						ИменаПолей,
						ПредставленияПолей,
						ИменаПолейБезДоступа);
				КонецЦикла;
			КонецЕсли;
				
			Если ИменаПолей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаТабличныхЧастей.Добавить(МетаданныеТабличнаяЧасть.Имя);
			ПредставлениеТабличнойЧасти = Новый Структура;
			ПредставлениеТабличнойЧасти.Вставить("ИменаПолей", ИменаПолей);
			ПредставлениеТабличнойЧасти.Вставить("ПредставленияПолей", ПредставленияПолей);

			ПредставленияТабличныхЧастей.Добавить(ПредставлениеТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого МетаданныеТабличнаяЧасть Из МетаданныеДанных.ТабличныеЧасти Цикл
		Если Не ПравоДоступа("Просмотр", МетаданныеТабличнаяЧасть) Тогда 
			ИменаТабличныхЧастейБезДоступа.Добавить(МетаданныеТабличнаяЧасть.Имя);
			Продолжить;
		КонецЕсли;
		
		Если Не МетаданныеВерсииТабличныеЧасти.Свойство(МетаданныеТабличнаяЧасть.Имя, МетаданныеВерсииТабличнаяЧасть) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не МетаданныеВерсииТабличнаяЧасть.Свойство("Поля", МетаданныеВерсииПоляТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
			 
		ИменаПолей = Новый Массив;
		ПредставленияПолей = Новый Массив;
		ИменаПолейБезДоступа = Новый Массив;
		Для Каждого Поле Из МетаданныеТабличнаяЧасть.Реквизиты Цикл
			ОпределитьОтображаемоеПоле(
				Поле,
				МетаданныеВерсииПоляТабличнойЧасти,
				ИменаПолей,
				ПредставленияПолей,
				ИменаПолейБезДоступа);
		КонецЦикла;
		
		Если ИменаПолей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаТабличныхЧастей.Добавить(МетаданныеТабличнаяЧасть.Имя);
		ПредставлениеТабличнойЧасти = Новый Структура;
		ПредставлениеТабличнойЧасти.Вставить("ИменаПолей", ИменаПолей);
		ПредставлениеТабличнойЧасти.Вставить("ПредставленияПолей", ПредставленияПолей);
		ПредставленияТабличныхЧастей.Добавить(ПредставлениеТабличнойЧасти);
	КонецЦикла;
	
	НеНайденныеТабличныеЧасти = Новый СписокЗначений;
	Для Каждого МетаданныеВерсииТабличнаяЧасть Из МетаданныеВерсииТабличныеЧасти Цикл
		Если ИменаТабличныхЧастей.Найти(МетаданныеВерсииТабличнаяЧасть.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаТабличныхЧастейБезДоступа.Найти(МетаданныеВерсииТабличнаяЧасть.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НеНайденныеТабличныеЧасти.Добавить(МетаданныеВерсииТабличнаяЧасть.Ключ);
	КонецЦикла;
	НеНайденныеТабличныеЧасти.СортироватьПоЗначению();
	Для Каждого НеНайденнаяТабличнаяЧасть Из НеНайденныеТабличныеЧасти Цикл
		ИменаТабличныхЧастей.Добавить(НеНайденнаяТабличнаяЧасть.Значение);
		
		ПредставлениеТабличнойЧасти = Новый Структура;
		ИменаПолей = Новый Массив;
		ПредставленияПолей = Новый Массив;
		МетаданныеВерсииТабличныеЧасти.Свойство(НеНайденнаяТабличнаяЧасть.Значение, МетаданныеВерсииТабличнаяЧасть);
		Для Каждого Поле Из МетаданныеВерсииТабличнаяЧасть.Поля Цикл
			Если Поле.Ключ = "LineNumber" Или Поле.Ключ = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли;
			ИменаПолей.Добавить(Поле.Ключ);
			ПредставленияПолей.Добавить(Поле.Значение);
		КонецЦикла;
		ПредставлениеТабличнойЧасти.Вставить("ИменаПолей", ИменаПолей);
		ПредставлениеТабличнойЧасти.Вставить("ПредставленияПолей", ПредставленияПолей);
		
		ПредставленияТабличныхЧастей.Добавить(ПредставлениеТабличнойЧасти);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПоля(Параметры, ЗначениеПоля)
	Перем ЗначениеСвойства;
	Если ТипЗнч(ЗначениеПоля) = Тип("ФиксированнаяСтруктура") Тогда
		ЗначениеСвойства = Неопределено;
		Если ЗначениеПоля.Свойство("Представление", ЗначениеСвойства) Тогда
			Параметры.ЗначениеПоля = ЗначениеСвойства;
		КонецЕсли;
		ЗначениеСвойства = Неопределено;
		Если ЗначениеПоля.Свойство("Ссылка", ЗначениеСвойства) Тогда
			Параметры.ЗначениеПоляСсылка = ЗначениеСвойства;
		КонецЕсли;
	Иначе
		Параметры.ЗначениеПоля = ЗначениеПоля;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДанных(МетаданныеДанных, Данные)
	Перем Представление, Разделитель;
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) Тогда
		Представление = "";
	
		Если МетаданныеДанных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Если МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора
				Или МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда Тогда
				Представление = МетаданныеДанных.СтандартныеРеквизиты.Период.Представление() + "=" + Строка(Данные.Период);
			Иначе
				Представление = МетаданныеДанных.СтандартныеРеквизиты.Период.Представление() + "=" + Формат(Данные.Период, "ДЛФ=Д");
			КонецЕсли;
		КонецЕсли;
		
		Если МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			Представление = Представление + МетаданныеДанных.СтандартныеРеквизиты.Регистратор.Представление() + "=" + Строка(Данные.Регистратор);
		КонецЕсли;
		
		Для Каждого Измерение Из МетаданныеДанных.Измерения Цикл
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			Представление = Представление + Строка(Измерение) + "=" + Строка(Данные[Измерение.Имя]);
		КонецЦикла;
		
		Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			Если 	ОбщийРеквизит.РазделениеДанных <> Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять
				Или ОбщийРеквизит.ИспользованиеРазделяемыхДанных <> Метаданные.СвойстваОбъектов.ИспользованиеРазделяемыхДанныхОбщегоРеквизита.НезависимоИСовместно Тогда
				Продолжить;
			КонецЕсли;
			
			Разделитель = ОбщийРеквизит.Content.Найти(МетаданныеДанных);
			Если 		Разделитель = Неопределено
				Или 	Разделитель.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (Разделитель.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
					И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
				Продолжить;
			КонецЕсли;

			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			
			Представление = Представление + Строка(ОбщийРеквизит) + "=" + Строка(Данные[ОбщийРеквизит.Имя]);
		КонецЦикла;
		
		Возврат Представление;
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеДанных) Тогда
		Возврат МетаданныеДанных.Представление();
	Иначе
		Возврат Строка(Данные);
	КонецЕсли;
КонецФункции

