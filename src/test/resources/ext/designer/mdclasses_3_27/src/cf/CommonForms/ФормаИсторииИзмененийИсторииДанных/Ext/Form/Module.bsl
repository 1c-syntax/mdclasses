
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем МетаданныеДанных, ЭтоПодчиненныйРегистрСведений;
	МетаданныеДанных = Параметры.Данные.Метаданные();
	Если Не ПравоДоступа("ПросмотрИсторииДанных", МетаданныеДанных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Отбор = Новый Структура;
	Отбор.Вставить("Данные", Параметры.Данные);
	
	Элементы.ВерсииКомментарий.ТолькоПросмотр = Не ПравоДоступа("РедактированиеКомментарияВерсииИсторииДанных", МетаданныеДанных);
	
	ЭтоПодчиненныйРегистрСведений = Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) 
		И МетаданныеДанных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
		
	Если ЭтоПодчиненныйРегистрСведений 
		Или Не ПравоДоступа("ПереходНаВерсиюИсторииДанных", МетаданныеДанных) Тогда
		Элементы.ФормаПерейтиНаВерсию.Видимость = Ложь;
		Элементы.ВерсииКонтекстноеМенюПерейтиНаВерсию.Видимость = Ложь;
	КонецЕсли;
	
	Заголовок = 
		ПолучитьПредставлениеДанных(МетаданныеДанных, Параметры.Данные) +  " (" + 
		НСтр("ru = 'История изменений'; SYS = 'DataHistory.VersionsTitle'", "ru")
 		+ ")";
		
	ИсторияДанных.ОбновитьИсторию(Параметры.Данные, Ложь, Ложь);
	ВыбратьВерсии();
	ОбновитьДоступностьОтключенияОтбора();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Версии.Очистить();
	ВыбратьВерсии();
КонецПроцедуры

&НаСервере
Процедура ВыбратьВерсии()
	Перем Колонки, Результат, Версия, ВерсияВидИзмененияДанных, ИмяПользователя, Узел, ДоступностьДействий,
		ИндексВидаИзмененияДанных, ИндексУзла, ИндексИмениПользователя, ИндексПолногоИмениПользователя;
		
	Колонки = Новый Массив;
	Колонки.Добавить("НомерВерсии");
	Колонки.Добавить("Дата");
	Колонки.Добавить("ИмяПользователя");
	Колонки.Добавить("ПолноеИмяПользователя");
	Колонки.Добавить("Комментарий");
	Колонки.Добавить("ВидИзмененияДанных");
	Колонки.Добавить("Узел");
	
	
	ИндексВидаИзмененияДанных = Колонки.Найти("ВидИзмененияДанных");
	ИндексУзла = Колонки.Найти("Узел");
	ИндексИмениПользователя = Колонки.Найти("ИмяПользователя");
	ИндексПолногоИмениПользователя = Колонки.Найти("ПолноеИмяПользователя");
	Результат = ИсторияДанных.ВыбратьВерсии(
		Отбор, 
		Колонки,
		"НомерВерсии Убыв");
		
	Для Каждого ЭлементРезультата Из Результат Цикл
		Версия = Версии.Добавить();
		
		Для ИндексКолонки = 0 По Колонки.Количество() - 1 Цикл
			Если ИндексКолонки = ИндексВидаИзмененияДанных Тогда
				ВерсияВидИзмененияДанных = ЭлементРезультата[ИндексВидаИзмененияДанных];
				
				Если ВерсияВидИзмененияДанных = ВидИзмененияДанных.Добавление Тогда
					Версия.ВидИзмененияДанных = 0;
				ИначеЕсли ВерсияВидИзмененияДанных = ВидИзмененияДанных.Изменение Тогда
					Версия.ВидИзмененияДанных = 1;
				ИначеЕсли ВерсияВидИзмененияДанных = ВидИзмененияДанных.Удаление Тогда
					Версия.ВидИзмененияДанных = 2;
				КонецЕсли;
				
			ИначеЕсли ИндексКолонки = ИндексПолногоИмениПользователя Тогда
				ИмяПользователя = ЭлементРезультата[ИндексПолногоИмениПользователя];
				
				Если ПустаяСтрока(ИмяПользователя) Тогда
					ИмяПользователя = ЭлементРезультата[ИндексИмениПользователя];
				КонецЕсли;
				Версия.ИмяПользователя = ИмяПользователя
			ИначеЕсли ИндексКолонки = ИндексИмениПользователя Тогда
				Продолжить;
			ИначеЕсли ИндексКолонки = ИндексУзла Тогда
				Узел = ЭлементРезультата[ИндексУзла];
				Если Узел = Неопределено Тогда
					Версия.Узел = НСтр("ru = 'Это приложение'; SYS = 'NodeThisApplication'", "ru");
				Иначе
					Версия.Узел = Строка(Узел.Метаданные()) + "(" + Строка(Узел) + ")" ;
				КонецЕсли;
			Иначе
				Версия[Колонки[ИндексКолонки]] = ЭлементРезультата[ИндексКолонки];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ДоступностьДействий = Результат.Количество() > 0;
	Элементы.ФормаОткрытьВерсию.Доступность = ДоступностьДействий;
	Элементы.ФормаСравнитьВерсии.Доступность = ДоступностьДействий;
	Элементы.ФормаСравнитьСПредыдущей.Доступность = ДоступностьДействий;
	Элементы.ФормаСравнитьСТекущей.Доступность = ДоступностьДействий;
	Элементы.ФормаПерейтиНаВерсию.Доступность = ДоступностьДействий;
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	Отбор = Новый Структура("Данные", Параметры.Данные);
	Версии.Очистить();
	ВыбратьВерсии();
	ОбновитьДоступностьОтключенияОтбора();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
	Перем ДиалогФильтра, Оповещение;
	ДиалогФильтра = Новый ДиалогОтбораВерсийИсторииДанных(Параметры.Данные);
	ДиалогФильтра.Отбор = Отбор;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборОповещение", ЭтаФорма);
	ДиалогФильтра.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОповещение(РезультатОтбора, ДополнительныеПараметры) Export
	Если РезультатОтбора <> Неопределено Тогда
		Версии.Очистить();
		Отбор = РезультатОтбора;
		Отбор.Вставить("Данные", Параметры.Данные);
		ВыбратьВерсии();
		ОбновитьДоступностьОтключенияОтбора();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьОтключенияОтбора()
	Элементы.ФормаОтключитьОтбор.Доступность = Отбор.Количество() > 1;
КонецПроцедуры	

&НаСервере
Функция ПолучитьИмяФормыПереходаНаВерсию()
	Перем МатаданныеДанных;
	МатаданныеДанных = Параметры.Данные.Метаданные();
	Если Метаданные.РегистрыСведений.Содержит(МатаданныеДанных) Тогда
		Возврат МатаданныеДанных.ПолноеИмя() + ".ФормаЗаписи";
	ИначеЕсли Метаданные.Константы.Содержит(МатаданныеДанных) Тогда
		Возврат МатаданныеДанных.ПолноеИмя() + ".ФормаКонстант";
	Иначе
		Возврат МатаданныеДанных.ПолноеИмя() + ".ФормаОбъекта";
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ПолучитьИмяФормыПоМетаданным(ВидФормы)
	Возврат Параметры.Данные.Метаданные().ПолноеИмя() + "." + ВидФормы;
КонецФункции

&НаСервере
Функция ПолучитьНомерПредыдущейВерсии(НомерВерсии)
	Перем НомерПредыдущейВерсии, БезВерсииУдаления, Результат;
	
	БезВерсииУдаления = Новый Массив();
	БезВерсииУдаления.Добавить(ВидИзмененияДанных.Добавление);
	БезВерсииУдаления.Добавить(ВидИзмененияДанных.Изменение);
	Результат = ИсторияДанных.ВыбратьВерсии(
		Новый Структура(
			"Данные, ВидИзмененияДанных", 
			Параметры.Данные,
			БезВерсииУдаления), 
		"НомерВерсии", 
		"НомерВерсии Возр");
	Для Каждого ПроверяемыйНомерВерсии Из Результат Цикл
		Если ПроверяемыйНомерВерсии[0] = НомерВерсии Тогда
			Возврат НомерПредыдущейВерсии;
		КонецЕсли;
		НомерПредыдущейВерсии = ПроверяемыйНомерВерсии[0];
	КонецЦикла;
	Возврат НомерПредыдущейВерсии;
КонецФункции

&НаСервере
Функция ПолучитьНомерТекущейВерсии()
	Перем БезВерсииУдаления, Результат;
	БезВерсииУдаления = Новый Массив();
	БезВерсииУдаления.Добавить(ВидИзмененияДанных.Добавление);
	БезВерсииУдаления.Добавить(ВидИзмененияДанных.Изменение);
	Результат = ИсторияДанных.ВыбратьВерсии(
		Новый Структура(
			"Данные, ВидИзмененияДанных", 
			Параметры.Данные,
			БезВерсииУдаления), 
		"НомерВерсии", 
		"НомерВерсии Убыв",
		1);
			
	Для Каждого ПроверяемыйНомерВерсии Из Результат Цикл
		Возврат ПроверяемыйНомерВерсии[0];
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ОткрытьВерсию()
	Перем НомерВерсии;
	Если Не ПроверитьВыбраннуюВерсию() Тогда
		Возврат;
	КонецЕсли;
	НомерВерсии = Элементы.Версии.ТекущиеДанные.НомерВерсии;
	Если НомерВерсии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму(ПолучитьИмяФормыПоМетаданным("ФормаДанныхВерсииИсторииДанных"), 
		Новый Структура("Данные, НомерВерсии", Параметры.Данные, НомерВерсии));

КонецПроцедуры

&НаКлиенте
Процедура ВерсииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьВерсию();
КонецПроцедуры

&НаКлиенте
Процедура СравнитьВерсии(Команда)
	Перем ВерсияДоИзменения, ВерсияПослеИзменения, Версия, НомерВерсииПослеИзменения, НомерВерсииДоИзменения;
	Если Элементы.Версии.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВерсияДоИзменения = Неопределено;
	ВерсияПослеИзменения = Неопределено;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Версии.ВыделенныеСтроки Цикл
		Версия = Элементы.Версии.ДанныеСтроки(ВыделеннаяСтрока);
		Если ВерсияДоИзменения = Неопределено Тогда
			ВерсияДоИзменения = Версия;
		ИначеЕсли ВерсияДоИзменения.НомерВерсии > Версия.НомерВерсии Тогда
			ВерсияДоИзменения = Версия;
		КонецЕсли;
		
		Если ВерсияПослеИзменения = Неопределено Тогда
			ВерсияПослеИзменения = Версия;
		ИначеЕсли ВерсияПослеИзменения.НомерВерсии < Версия.НомерВерсии Тогда
			ВерсияПослеИзменения = Версия;
		КонецЕсли;
	КонецЦикла;
	
	Если ВерсияПослеИзменения.ВидИзмененияДанных = 2 Тогда
		ПоказатьНельзяВыполнятьДействияСВерсиейУдаленияДанных();
		Возврат;
	КонецЕсли;
	
	Если ВерсияДоИзменения.ВидИзмененияДанных = 2 Тогда
		ПоказатьНельзяВыполнятьДействияСВерсиейУдаленияДанных();
		Возврат;
	КонецЕсли;
	НомерВерсииПослеИзменения = ВерсияПослеИзменения.НомерВерсии;
	НомерВерсииДоИзменения = ВерсияДоИзменения.НомерВерсии;
	
	Если  НомерВерсииДоИзменения = НомерВерсииПослеИзменения Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выберите две версии для сравнения';SYS='DataHistory.SelectVersionsTwoVersions'", "ru"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПолучитьИмяФормыПоМетаданным("ФормаРазличийВерсийИсторииДанных"), 
		Новый Структура(
			"Данные, НомерВерсииПослеИзменения, НомерВерсииДоИзменения", 
			Параметры.Данные, 
			НомерВерсииПослеИзменения,
			НомерВерсииДоИзменения));
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСТекущей(Команда)
	Перем НомерВерсииДоИзменения, НомерТекущейВерсии; 
	Если Не ПроверитьВыбраннуюВерсию() Тогда
		Возврат;
	КонецЕсли;

	НомерВерсииДоИзменения = Элементы.Версии.ТекущиеДанные.НомерВерсии;
	Если НомерВерсииДоИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерТекущейВерсии = ПолучитьНомерТекущейВерсии();
	Если НомерТекущейВерсии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НомерТекущейВерсии = НомерВерсииДоИзменения Тогда
		ПоказатьПредупреждение(,НСтр("ru='Версия является текущей';SYS='DataHistory.VersionIsLast'", "ru"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПолучитьИмяФормыПоМетаданным("ФормаРазличийВерсийИсторииДанных"), 
		Новый Структура(
			"Данные, НомерВерсииПослеИзменения, НомерВерсииДоИзменения", 
			Параметры.Данные, 
			НомерТекущейВерсии,
			НомерВерсииДоИзменения));
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСПредыдущей(Команда)
	Перем НомерВерсииДоИзменения, НомерВерсииПослеИзменения;
	Если Не ПроверитьВыбраннуюВерсию() Тогда
		Возврат;
	КонецЕсли;
	
	НомерВерсииПослеИзменения = Элементы.Версии.ТекущиеДанные.НомерВерсии;
	Если НомерВерсииПослеИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерВерсииДоИзменения = ПолучитьНомерПредыдущейВерсии(НомерВерсииПослеИзменения);
	Если НомерВерсииДоИзменения = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Предыдущая версия отсутствует';SYS='DataHistory.PreviousVersionNotExists'", "ru"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПолучитьИмяФормыПоМетаданным("ФормаРазличийВерсийИсторииДанных"), 
		Новый Структура(
			"Данные, НомерВерсииПослеИзменения, НомерВерсииДоИзменения", 
			Параметры.Данные, 
			НомерВерсииПослеИзменения,
			НомерВерсииДоИзменения));
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаВерсию(Команда)
	Если Не ПроверитьВыбраннуюВерсию() Тогда
		Возврат;
	КонецЕсли;
		
	ОткрытьФорму(ПолучитьИмяФормыПереходаНаВерсию(), Новый Структура(
		"Ключ, НомерВерсииПереходаНаВерсиюИсторииДанных", 
		Параметры.Данные, 
		Элементы.Версии.ТекущиеДанные.НомерВерсии));
КонецПроцедуры

&НаКлиенте
Процедура ВерсииКомментарийПриИзменении(Элемент)
	Перем Версия;
	Версия = Элементы.Версии.ТекущиеДанные;
	Если Версия <> Неопределено Тогда
		ЗаписатьКомментарий(Параметры.Данные, Версия.НомерВерсии, Версия.Комментарий);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьКомментарий(Данные, НомерВерсии, Комментарий)
	ИсторияДанных.ЗаписатьКомментарий(Данные, НомерВерсии, Комментарий);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВыбраннуюВерсию()
	Если Элементы.Версии.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выберите версию';SYS='DataHistory.SelectVersionsVersion'", "ru"));
		Возврат Ложь;
	КонецЕсли;
	Если Элементы.Версии.ТекущиеДанные.ВидИзмененияДанных = 2 Тогда
		ПоказатьНельзяВыполнятьДействияСВерсиейУдаленияДанных();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПоказатьНельзяВыполнятьДействияСВерсиейУдаленияДанных()
	ПоказатьПредупреждение(,НСтр("ru='Нельзя выполнять действия с версией, соответствующей удалению данных';SYS='DataHistory.NotAllowedActionsOnDeletedVersion'", "ru"));
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДанных(МетаданныеДанных, Данные)
	Перем Представление, Разделитель;
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) Тогда 
		Представление = "";
	
		Если МетаданныеДанных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Если МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора
				Или МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда Тогда
				Представление = МетаданныеДанных.СтандартныеРеквизиты.Период.Представление() + "=" + Строка(Данные.Период);
			Иначе
				Представление = МетаданныеДанных.СтандартныеРеквизиты.Период.Представление() + "=" + Формат(Данные.Период, "ДЛФ=Д");
			КонецЕсли;
		КонецЕсли;
		
		Если МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			Представление = Представление + МетаданныеДанных.СтандартныеРеквизиты.Регистратор.Представление() + "=" + Строка(Данные.Регистратор);
		КонецЕсли;
		
		Для Каждого Измерение Из МетаданныеДанных.Измерения Цикл
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			Представление = Представление + Строка(Измерение) + "=" + Строка(Данные[Измерение.Имя]);
		КонецЦикла;
		
		Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			Если 	ОбщийРеквизит.РазделениеДанных <> Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять
				Или ОбщийРеквизит.ИспользованиеРазделяемыхДанных <> Метаданные.СвойстваОбъектов.ИспользованиеРазделяемыхДанныхОбщегоРеквизита.НезависимоИСовместно Тогда
				Продолжить;
			КонецЕсли;
			
			Разделитель = ОбщийРеквизит.Content.Найти(МетаданныеДанных);
			Если 		Разделитель = Неопределено
				Или 	Разделитель.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (Разделитель.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
					И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
				Продолжить;
			КонецЕсли;

			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			
			Представление = Представление + Строка(ОбщийРеквизит) + "=" + Строка(Данные[ОбщийРеквизит.Имя]);
		КонецЦикла;
		
		Возврат Представление;
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеДанных) Тогда
		Возврат МетаданныеДанных.Представление();
	Иначе
		Возврат Строка(Данные);
	КонецЕсли;		
КонецФункции