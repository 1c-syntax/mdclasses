&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем МетаданныеДанных, ЭтоРегистрСведений, ЭтоПодчиненныйРегистрСведений, ЗначениеСвойства, РазличияТабличнойЧасти,
		Шаблон, ОтборВерсии, Версия, Данные, Различия, МетаданныеВерсии,
		ИндексДаты, ИндексИмениПользователя, ИндексПолногоИмениПользователя, ИндексКомментария,
		ИмяПользователя, Комментарий, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИмяПоля, ИменаПолейБезДоступа,
		ИменаТабличныхЧастей, ПредставленияТабличныхЧастей, ИмяТабличнойЧасти,
		ОбластьЗаголовка, ОбластьКомменатрия, ОбластьПредставленияПоля, ОбластьЗначенияПоля, ПустаяЯчейка, ПустаяСтрока,
		МетаданныеВерсииТабличныеЧасти, ТабличныеЧасти, МетаданныеТабличнаяЧасть,
		МетаданныеВерсииТабличнаяЧасть, ТабличнаяЧастьДокумент, ОбластьПредставленияТабличнойЧасти,
		ДлиныЗначенийПолей, ПредставлениеНомераСтроки, ИмяПоляНомерСтроки, ОбластьЗаголовкаНомераСтроки, ДлинаНомераСтроки, ОбластьЗаголовкаПоля,
		ДанныеТабличнойЧасти, НомерСтроки, Колонка, СтрокаТабличнойЧастиРазличия, ОбластьНомераСтроки,
		ИндексДлиныЗначенияПоля, ОбластьПоляТабличнойЧасти, ЗначениеПоляТабличнойЧасти, ДлинаЗначения,
		ШаблонИмениОбластиКолонки, ИмяОбластиКолонки, ОбластьЛегенды,
		ИндексПоля, ИндексТабличнойЧасти;
	
	МетаданныеДанных = Параметры.Данные.Метаданные();
	
	Если Не ПравоДоступа("ПросмотрИсторииДанных", МетаданныеДанных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЭтоРегистрСведений = Метаданные.РегистрыСведений.Содержит(МетаданныеДанных);
	ЭтоПодчиненныйРегистрСведений = ЭтоРегистрСведений 
		И МетаданныеДанных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	
	Элементы.ФормаПерейтиНаВерсию.Видимость = Не ЭтоПодчиненныйРегистрСведений
		И ПравоДоступа("ПереходНаВерсиюИсторииДанных", МетаданныеДанных);
	Заголовок = 
		ПолучитьПредставлениеДанных(МетаданныеДанных, Параметры.Данные) +  " (" + 
		НСтр("ru = 'Версия'; SYS = 'DataHistory.DataTitle'", "ru") + " " + 
		Строка(Параметры.НомерВерсии) + ")";
	
	Шаблон = Новый ТабличныйДокумент;
	Шаблон.Прочитать("v8res://mngbase/DataHistoryVersionDataRuTemplate.mxl");
	Отчет.Очистить();
	
	ОтборВерсии = Новый Структура;
	ОтборВерсии.Вставить("Данные", Параметры.Данные);
	ОтборВерсии.Вставить("НомерВерсии", Параметры.НомерВерсии);
	
	ИндексДаты = 0;
	ИндексИмениПользователя = 1;
	ИндексПолногоИмениПользователя = 2;
	ИндексКомментария = 3;
	
	Версия = ИсторияДанных.ВыбратьВерсии(ОтборВерсии, "Дата, ИмяПользователя, ПолноеИмяПользователя, Комментарий", , )[0];
	Данные = ИсторияДанных.ПолучитьДанныеВерсии(Параметры.Данные, Параметры.НомерВерсии);
	Различия = ИсторияДанных.ПолучитьРазличияВерсий(Параметры.Данные, Параметры.НомерВерсии);
	
	МетаданныеВерсии = ИсторияДанных.ПолучитьМетаданные(Параметры.Данные, Параметры.НомерВерсии);

	ОбластьЗаголовка = Шаблон.ПолучитьОбласть("Заголовок");
	МетаданныеВерсии.Свойство("Представление", ОбластьЗаголовка.Параметры.ПредставлениеМетаданных);
	ОбластьЗаголовка.Параметры.НомерВерсии = Параметры.НомерВерсии;
	
	ОбластьЗаголовка.Параметры.Дата = Версия[ИндексДаты];
	ИмяПользователя = Версия[ИндексПолногоИмениПользователя];
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = Версия[ИндексИмениПользователя]
	КонецЕсли;
	ОбластьЗаголовка.Параметры.ИмяПользователя = ИмяПользователя;

	Комментарий = Версия[ИндексКомментария];
	
	Отчет.Вывести(ОбластьЗаголовка);
	
	ПустаяЯчейка = Шаблон.ПолучитьОбласть("ПустаяЯчейка");
	ПустаяСтрока = Шаблон.ПолучитьОбласть("ПустаяСтрока");
	
	Если Не ПустаяСтрока(Комментарий) Тогда
		ОбластьКомменатрия = Шаблон.ПолучитьОбласть("Комментарий");
		ОбластьКомменатрия.Параметры.Комментарий = Комментарий;
		Отчет.Вывести(ОбластьКомменатрия);
	КонецЕсли;
	
	Отчет.Вывести(ПустаяСтрока);
	Если МетаданныеВерсии.Свойство("Поля", МетаданныеВерсииПоля)Тогда
		ИменаПолей = Новый Массив;
		ПредставленияПолей = Новый Массив;
		ИменаПолейБезДоступа = Новый Массив;
		
		ОпределитьОтображаемыеПоляДанных(
			МетаданныеДанных,
			МетаданныеВерсииПоля,
			ИменаПолей,
			ПредставленияПолей,
			ИменаПолейБезДоступа);
		
		Для ИндексПоля = 0 По ИменаПолей.Количество() - 1 Цикл
			ИмяПоля = ИменаПолей[ИндексПоля];
			
			ОбластьПредставленияПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоля");
			ОбластьПредставленияПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
			Отчет.Вывести(ОбластьПредставленияПоля);
			
			Если Различия.Свойство(ИмяПоля, ЗначениеСвойства) Тогда
				ОбластьЗначенияПоля = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоля");
			Иначе
				ОбластьЗначенияПоля = Шаблон.ПолучитьОбласть("ЗначениеПоля");
			КонецЕсли;
			
			Если Данные.Свойство(ИмяПоля, ЗначениеСвойства) Тогда
				УстановитьЗначениеПоля(ОбластьЗначенияПоля.Параметры, ЗначениеСвойства);
				Отчет.Присоединить(ОбластьЗначенияПоля);
			КонецЕсли;
		КонецЦикла;
		Отчет.Вывести(ПустаяСтрока);
	КонецЕсли;
	
	Если МетаданныеВерсии.Свойство("ТабличныеЧасти", МетаданныеВерсииТабличныеЧасти) Тогда
		ИменаТабличныхЧастей = Новый Массив;
		ПредставленияТабличныхЧастей = Новый Массив;
		
		ОпределитьОтображаемыеТабличныеЧасти(
			МетаданныеДанных,
			МетаданныеВерсииТабличныеЧасти,
			ИменаТабличныхЧастей,
			ПредставленияТабличныхЧастей);
			
		Для ИндексТабличнойЧасти = 0 По ИменаТабличныхЧастей.Количество() - 1 Цикл

			ИмяТабличнойЧасти = ИменаТабличныхЧастей[ИндексТабличнойЧасти];
			Если Не МетаданныеВерсииТабличныеЧасти.Свойство(ИмяТабличнойЧасти, МетаданныеВерсииТабличнаяЧасть) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не МетаданныеВерсииТабличнаяЧасть.Свойство("Поля", МетаданныеВерсииПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаПолей = ПредставленияТабличныхЧастей[ИндексТабличнойЧасти].ИменаПолей;
			ПредставленияПолей = ПредставленияТабличныхЧастей[ИндексТабличнойЧасти].ПредставленияПолей;
			
			
			ТабличнаяЧастьДокумент = Новый ТабличныйДокумент;
			ОбластьПредставленияТабличнойЧасти = Шаблон.ПолучитьОбласть("ПредставлениеТабличнойЧасти");
			
			МетаданныеВерсииТабличнаяЧасть.Свойство(
				"Представление", 
				ОбластьПредставленияТабличнойЧасти.Параметры.ПредставлениеТабличнойЧасти);
			
			ТабличнаяЧастьДокумент.Вывести(ОбластьПредставленияТабличнойЧасти);
			ТабличнаяЧастьДокумент.Вывести(ПустаяСтрока);
			
			ДлиныЗначенийПолей = Новый Массив;
			
			ИмяПоляНомерСтроки = "НомерСтроки";
			Если МетаданныеВерсииПоля.Свойство(ИмяПоляНомерСтроки, ЗначениеСвойства) Тогда
				ПредставлениеНомераСтроки = ЗначениеСвойства;
			Иначе
				ИмяПоляНомерСтроки = "LineNumber";
				Если МетаданныеВерсииПоля.Свойство(ИмяПоляНомерСтроки, ЗначениеСвойства) Тогда
					ПредставлениеНомераСтроки = ЗначениеСвойства
				Иначе
					ПредставлениеНомераСтроки = "№";
				КонецЕсли;
			КонецЕсли;
			
			Если  ИмяПоляНомерСтроки = ПредставлениеНомераСтроки Тогда
				ПредставлениеНомераСтроки = "№";
			КонецЕсли;
			
			ОбластьЗаголовкаНомераСтроки = Шаблон.ПолучитьОбласть("ПредставлениеПоляТабличнойЧасти");
			ОбластьЗаголовкаНомераСтроки.Параметры.ПредставлениеПоля = ПредставлениеНомераСтроки;
			ТабличнаяЧастьДокумент.Вывести(ОбластьЗаголовкаНомераСтроки);
			ДлинаНомераСтроки = СтрДлина(ПредставлениеНомераСтроки);
			
			Для ИндексПоля = 0 По ИменаПолей.Количество() - 1 Цикл
				ОбластьЗаголовкаПоля = Шаблон.ПолучитьОбласть("ПредставлениеПоляТабличнойЧасти");
				ОбластьЗаголовкаПоля.Параметры.ПредставлениеПоля = ПредставленияПолей[ИндексПоля];
				ТабличнаяЧастьДокумент.Присоединить(ОбластьЗаголовкаПоля);
				ДлиныЗначенийПолей.Добавить(СтрДлина(ПредставленияПолей[ИндексПоля]));
			КонецЦикла;
			
			Если Не Данные.Свойство(ИмяТабличнойЧасти, ДанныеТабличнойЧасти) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеТабличнойЧасти.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Различия.Свойство(ИмяТабличнойЧасти, РазличияТабличнойЧасти);
			
			НомерСтроки = 1;
			
			ИндексыПолей = Новый Массив;
			Для Каждого ИмяПоля Из ИменаПолей Цикл
				Колонка = ДанныеТабличнойЧасти.Колонки.Найти(ИмяПоля);
				Если Колонка = Неопределено Тогда
					ИндексыПолей.Добавить(-1);
				Иначе
					ИндексыПолей.Добавить(ДанныеТабличнойЧасти.Колонки.Индекс(Колонка));
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТабличнойЧасти Из ДанныеТабличнойЧасти Цикл
				СтрокаТабличнойЧастиРазличия = НайтиСтрокуТабличнойЧастиВРазличиях(РазличияТабличнойЧасти, НомерСтроки);
				
				Если СтрокаТабличнойЧастиРазличия <> Неопределено
					И СтрокаТабличнойЧастиРазличия.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Добавление Тогда
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("СозданиеЗначенияПоляТабличнойЧасти");
				Иначе
					ОбластьНомераСтроки = Шаблон.ПолучитьОбласть("ЗначениеПоляТабличнойЧасти");
				КонецЕсли;
				
				ОбластьНомераСтроки.Параметры.ЗначениеПоля = НомерСтроки;
				
				НомерСтроки = НомерСтроки + 1;
				ТабличнаяЧастьДокумент.Вывести(ОбластьНомераСтроки);
				
				ИндексДлиныЗначенияПоля = -1;
				Для Каждого ИндексПоля Из ИндексыПолей Цикл
					ИндексДлиныЗначенияПоля = ИндексДлиныЗначенияПоля + 1;
					Если ИндексПоля = -1 Тогда
						ТабличнаяЧастьДокумент.Присоединить(ПустаяЯчейка);
						Продолжить;
					КонецЕсли;
					
					ОбластьПоляТабличнойЧасти = Неопределено;
					Если СтрокаТабличнойЧастиРазличия <> Неопределено Тогда
						Если СтрокаТабличнойЧастиРазличия.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Добавление  Тогда
							ОбластьПоляТабличнойЧасти = Шаблон.ПолучитьОбласть("СозданиеЗначенияПоляТабличнойЧасти");
						ИначеЕсли ИзменилосьЗначениеПоляТабличнойЧасти(СтрокаТабличнойЧастиРазличия, ДанныеТабличнойЧасти.Колонки[ИндексПоля].Имя) Тогда
							ОбластьПоляТабличнойЧасти = Шаблон.ПолучитьОбласть("ИзменениеЗначенияПоляТабличнойЧасти");
						КонецЕсли;
						
					КонецЕсли;
					Если ОбластьПоляТабличнойЧасти = Неопределено Тогда
						ОбластьПоляТабличнойЧасти = Шаблон.ПолучитьОбласть("ЗначениеПоляТабличнойЧасти");
					КонецЕсли;
					
					ЗначениеПоляТабличнойЧасти = СтрокаТабличнойЧасти[ИндексПоля];
					УстановитьЗначениеПоля(ОбластьПоляТабличнойЧасти.Параметры, ЗначениеПоляТабличнойЧасти);

					ТабличнаяЧастьДокумент.Присоединить(ОбластьПоляТабличнойЧасти);
					
					ДлинаЗначения = ПолучитьДлинуЗначения(ЗначениеПоляТабличнойЧасти);
					Если ДлинаЗначения > ДлиныЗначенийПолей[ИндексДлиныЗначенияПоля] Тогда
						ДлиныЗначенийПолей[ИндексДлиныЗначенияПоля] = ДлинаЗначения;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			ШаблонИмениОбластиКолонки = "R3C%1:R" + Формат(3 + ДанныеТабличнойЧасти.Количество(), "ЧГ=0") + "C%1";
			ИмяОбластиКолонки = СтрШаблон(ШаблонИмениОбластиКолонки, 1);
			ТабличнаяЧастьДокумент.Область(ИмяОбластиКолонки).СоздатьФорматСтрок();
			ТабличнаяЧастьДокумент.Область(ИмяОбластиКолонки).ШиринаКолонки = ДлинаНомераСтроки + 4;
			
			Для ИндексПоля = 0 По ДлиныЗначенийПолей.Количество() - 1 Цикл
				ИмяОбластиКолонки = СтрШаблон(ШаблонИмениОбластиКолонки, ИндексПоля + 2);

				ТабличнаяЧастьДокумент.Область(ИмяОбластиКолонки).СоздатьФорматСтрок();
				ТабличнаяЧастьДокумент.Область(ИмяОбластиКолонки).ШиринаКолонки = ДлиныЗначенийПолей[ИндексПоля] + 4;
			КонецЦикла;
			Отчет.Вывести(ТабличнаяЧастьДокумент);
			Отчет.Вывести(ПустаяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	ОбластьЛегенды = Шаблон.ПолучитьОбласть("Легенда");
	ОбластьЛегенды.Область("R1C1:R3C1").СоздатьФорматСтрок();
	ОбластьЛегенды.Область("R1C1:R3C1").ШиринаКолонки = 12;
	
	Отчет.Вывести(ОбластьЛегенды);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеПоляДанных(МетаданныеДанных, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Перем ПредставлениеПоля;
	
	Если Метаданные.Константы.Содержит(МетаданныеДанных) Тогда 
		Для Каждого ПолеВерсии Из МетаданныеВерсииПоля Цикл
			Если Метаданные.ОбщиеРеквизиты.Найти(ПолеВерсии.Ключ) = Неопределено Тогда
				ИменаПолей.Добавить(ПолеВерсии.Ключ);
				ПредставленияПолей.Добавить(ПолеВерсии.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
	
		ОпределитьОтображаемыеСтандартныеРеквизиты(
			МетаданныеДанных,
			МетаданныеВерсииПоля,
			ИменаПолей,
			ПредставленияПолей,
			ИменаПолейБезДоступа);
			
		Если Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) Тогда
			ОпределитьОтображаемыеПоля(
				МетаданныеДанных.Измерения,
				МетаданныеВерсииПоля,
				ИменаПолей,
				ПредставленияПолей,
				ИменаПолейБезДоступа);
				
			ОпределитьОтображаемыеПоля(
				МетаданныеДанных.Ресурсы,
				МетаданныеВерсииПоля,
				ИменаПолей,
				ПредставленияПолей,
				ИменаПолейБезДоступа);
		КонецЕсли;
		
		ОпределитьОтображаемыеПоля(
			МетаданныеДанных.Реквизиты,
			МетаданныеВерсииПоля,
			ИменаПолей,
			ПредставленияПолей,
			ИменаПолейБезДоступа);
			
		Если Метаданные.ПланыСчетов.Содержит(МетаданныеДанных) Тогда
			ОпределитьОтображаемыеПоля(
				МетаданныеДанных.ПризнакиУчета, 
				МетаданныеВерсииПоля, 
				ИменаПолей, 
				ПредставленияПолей,
				ИменаПолейБезДоступа);
		КонецЕсли;

	КонецЕсли;
	
	ОпределитьОтображаемыеПоля(
		Метаданные.ОбщиеРеквизиты,
		МетаданныеВерсииПоля,
		ИменаПолей,
		ПредставленияПолей,
		ИменаПолейБезДоступа);
		
	ОпределитьОтображаемыеДополнительныеПоля(
		МетаданныеВерсииПоля,
		ИменаПолей, 
		ПредставленияПолей,
		ИменаПолейБезДоступа);
КонецПроцедуры
	
&НаСервере
Процедура ОпределитьОтображаемоеПоле(Поле, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Перем ПредставлениеПоля;
	Если Не ПравоДоступа("Просмотр", Поле) Тогда
		ИменаПолейБезДоступа.Добавить(Поле.Имя);
		Возврат;
	КонецЕсли;
		
	Если Не МетаданныеВерсииПоля.Свойство(Поле.Имя, ПредставлениеПоля) Тогда
		Возврат;
	КонецЕсли;
	ИменаПолей.Добавить(Поле.Имя);
	ПредставленияПолей.Добавить(ПредставлениеПоля);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеПоля(Поля, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Для Каждого Поле Из Поля Цикл
		ОпределитьОтображаемоеПоле(Поле, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеДополнительныеПоля(МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Перем НеНайденныеПоля, ПредставлениеПоля;
	НеНайденныеПоля = Новый СписокЗначений;
	Для Каждого МетаданныеВерсииПоле Из МетаданныеВерсииПоля Цикл
		Если ИменаПолей.Найти(МетаданныеВерсииПоле.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаПолейБезДоступа.Найти(МетаданныеВерсииПоле.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НеНайденныеПоля.Добавить(МетаданныеВерсииПоле.Ключ, МетаданныеВерсииПоле.Значение);
	КонецЦикла;
	НеНайденныеПоля.СортироватьПоЗначению();
	Для Каждого НеНайденноеПоле Из НеНайденныеПоля Цикл
		ИменаПолей.Добавить(НеНайденноеПоле.Значение);
		ПредставленияПолей.Добавить(НеНайденноеПоле.Представление);
	КонецЦикла;
КонецПроцедуры
	
&НаСервере
Процедура ОпределитьОтображаемыйСтандартныйРеквизит(МетаданныеДанных, Поле, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа, ИмяТабличнойЧасти = Неопределено)
	Перем ПредставлениеПоля, ПутьПоля;
	Если ИмяТабличнойЧасти = Неопределено Тогда
		ПутьПоля = Поле.Имя;
	Иначе
		ПутьПоля = ИмяТабличнойЧасти + "." + Поле.Имя;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", МетаданныеДанных, , ПутьПоля) Тогда
		ИменаПолейБезДоступа.Добавить(Поле.Имя);
		Возврат;
	КонецЕсли;
	
	Если Не МетаданныеВерсииПоля.Свойство(Поле.Имя, ПредставлениеПоля) Тогда
		Возврат;
	КонецЕсли;
	ИменаПолей.Добавить(Поле.Имя);
	ПредставленияПолей.Добавить(ПредставлениеПоля);
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеСтандартныеРеквизиты(МетаданныеДанных, МетаданныеВерсииПоля, ИменаПолей, ПредставленияПолей, ИменаПолейБезДоступа)
	Для Каждого Поле Из МетаданныеДанных.СтандартныеРеквизиты Цикл
		ОпределитьОтображаемыйСтандартныйРеквизит(
			МетаданныеДанных,
			Поле,
			МетаданныеВерсииПоля,
			ИменаПолей,
			ПредставленияПолей,
			ИменаПолейБезДоступа);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображаемыеТабличныеЧасти(МетаданныеДанных, МетаданныеВерсииТабличныеЧасти, ИменаТабличныхЧастей, ПредставленияТабличныхЧастей)
	Перем ЭтоПланСчетов, ЭтоПланВидовРасчета, 
		МетаданныеВерсииТабличнаяЧасть, МетаданныеВерсииПоляТабличнойЧасти,
		ИменаПолей, ПредставленияПолей, НеНайденныеТабличныеЧасти, ИменаПолейБезДоступа,
		ПредставлениеТабличнойЧасти, ИменаТабличныхЧастейБезДоступа;
		
	ЭтоПланСчетов = Метаданные.ПланыСчетов.Содержит(МетаданныеДанных);
	ЭтоПланВидовРасчета = Метаданные.ПланыВидовРасчета.Содержит(МетаданныеДанных);
	НеНайденныеТабличныеЧасти = Новый СписокЗначений;
	ИменаТабличныхЧастейБезДоступа = Новый Массив;
	Если ЭтоПланСчетов Или ЭтоПланВидовРасчета Тогда
		Для Каждого МетаданныеТабличнаяЧасть Из МетаданныеДанных.СтандартныеТабличныеЧасти Цикл
			
			Если Не ПравоДоступа("Просмотр", МетаданныеДанных, , МетаданныеТабличнаяЧасть.Имя) Тогда
				ИменаТабличныхЧастейБезДоступа.Добавить(МетаданныеТабличнаяЧасть.Имя);
				Продолжить;
			КонецЕсли;
			
			Если Не МетаданныеВерсииТабличныеЧасти.Свойство(МетаданныеТабличнаяЧасть.Имя, МетаданныеВерсииТабличнаяЧасть) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не МетаданныеВерсииТабличнаяЧасть.Свойство("Поля", МетаданныеВерсииПоляТабличнойЧасти) Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаПолей = Новый Массив;
			ПредставленияПолей = Новый Массив;
			ИменаПолейБезДоступа = Новый Массив;
			
			Для Каждого Поле Из МетаданныеТабличнаяЧасть.СтандартныеРеквизиты Цикл
				Если Поле.Имя = "LineNumber" Или Поле.Имя = "НомерСтроки" Тогда
					Продолжить;
				КонецЕсли;
			
				ОпределитьОтображаемыйСтандартныйРеквизит(
					МетаданныеДанных,
					Поле,
					МетаданныеВерсииПоляТабличнойЧасти,
					ИменаПолей,
					ПредставленияПолей,
					ИменаПолейБезДоступа,
					МетаданныеТабличнаяЧасть.Имя);

			КонецЦикла;
			
			Если ЭтоПланСчетов Тогда 
				Для Каждого Поле Из МетаданныеДанных.ПризнакиУчетаСубконто Цикл
					ОпределитьОтображаемоеПоле(
						Поле,
						МетаданныеВерсииПоляТабличнойЧасти,
						ИменаПолей,
						ПредставленияПолей,
						ИменаПолейБезДоступа);
				КонецЦикла;
			КонецЕсли;
				
			Если ИменаПолей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			ИменаТабличныхЧастей.Добавить(МетаданныеТабличнаяЧасть.Имя);
			ПредставлениеТабличнойЧасти = Новый Структура;
			ПредставлениеТабличнойЧасти.Вставить("ИменаПолей", ИменаПолей);
			ПредставлениеТабличнойЧасти.Вставить("ПредставленияПолей", ПредставленияПолей);

			ПредставленияТабличныхЧастей.Добавить(ПредставлениеТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого МетаданныеТабличнаяЧасть Из МетаданныеДанных.ТабличныеЧасти Цикл
		Если Не ПравоДоступа("Просмотр", МетаданныеТабличнаяЧасть) Тогда
			ИменаТабличныхЧастейБезДоступа.Добавить(МетаданныеТабличнаяЧасть.Имя);
			Продолжить;
		КонецЕсли;
		
		Если Не МетаданныеВерсииТабличныеЧасти.Свойство(МетаданныеТабличнаяЧасть.Имя, МетаданныеВерсииТабличнаяЧасть) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не МетаданныеВерсииТабличнаяЧасть.Свойство("Поля", МетаданныеВерсииПоляТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаПолей = Новый Массив;
		ПредставленияПолей = Новый Массив;
		ИменаПолейБезДоступа = Новый Массив;
		
		Для Каждого Поле Из МетаданныеТабличнаяЧасть.Реквизиты Цикл
			ОпределитьОтображаемоеПоле(
				Поле,
				МетаданныеВерсииПоляТабличнойЧасти,
				ИменаПолей,
				ПредставленияПолей,
				ИменаПолейБезДоступа);
		КонецЦикла;
		
		Если ИменаПолей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаТабличныхЧастей.Добавить(МетаданныеТабличнаяЧасть.Имя);
		ПредставлениеТабличнойЧасти = Новый Структура;
		ПредставлениеТабличнойЧасти.Вставить("ИменаПолей", ИменаПолей);
		ПредставлениеТабличнойЧасти.Вставить("ПредставленияПолей", ПредставленияПолей);
		ПредставленияТабличныхЧастей.Добавить(ПредставлениеТабличнойЧасти);
	КонецЦикла;
	
	НеНайденныеТабличныеЧасти = Новый СписокЗначений;
	Для Каждого МетаданныеВерсииТабличнаяЧасть Из МетаданныеВерсииТабличныеЧасти Цикл
		Если ИменаТабличныхЧастей.Найти(МетаданныеВерсииТабличнаяЧасть.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ИменаТабличныхЧастейБезДоступа.Найти(МетаданныеВерсииТабличнаяЧасть.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НеНайденныеТабличныеЧасти.Добавить(МетаданныеВерсииТабличнаяЧасть.Ключ);
	КонецЦикла;		
	НеНайденныеТабличныеЧасти.СортироватьПоЗначению();
	Для Каждого НеНайденнаяТабличнаяЧасть Из НеНайденныеТабличныеЧасти Цикл
		ИменаТабличныхЧастей.Добавить(НеНайденнаяТабличнаяЧасть.Значение);
		
		ПредставлениеТабличнойЧасти = Новый Структура;
		ИменаПолей = Новый Массив;
		ПредставленияПолей = Новый Массив;
		МетаданныеВерсииТабличныеЧасти.Свойство(НеНайденнаяТабличнаяЧасть.Значение, МетаданныеВерсииТабличнаяЧасть);
		Для Каждого Поле Из МетаданныеВерсииТабличнаяЧасть.Поля Цикл
			Если Поле.Ключ = "LineNumber" Или Поле.Ключ = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли;
			ИменаПолей.Добавить(Поле.Ключ);
			ПредставленияПолей.Добавить(Поле.Значение);
		КонецЦикла;
		ПредставлениеТабличнойЧасти.Вставить("ИменаПолей", ИменаПолей);
		ПредставлениеТабличнойЧасти.Вставить("ПредставленияПолей", ПредставленияПолей);
		
		ПредставленияТабличныхЧастей.Добавить(ПредставлениеТабличнойЧасти);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПоля(Параметры, ЗначениеПоля)
	Если ТипЗнч(ЗначениеПоля) = Тип("ФиксированнаяСтруктура") Тогда
		ЗначениеПоля.Свойство("Представление", Параметры.ЗначениеПоля);
		ЗначениеПоля.Свойство("Ссылка", Параметры.ЗначениеПоляСсылка);
	Иначе
		Параметры.ЗначениеПоля = ЗначениеПоля;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДлинуЗначения(ЗначениеПоля)
	Перем ПредставлениеПоля;
	Если ТипЗнч(ЗначениеПоля) = Тип("ФиксированнаяСтруктура") Тогда
		Если Не ЗначениеПоля.Свойство("Представление", ПредставлениеПоля) Тогда
			Возврат 0;
		КонецЕсли;
		Возврат СтрДлина(ПредставлениеПоля);
	Иначе
		Возврат СтрДлина(ЗначениеПоля);
	КонецЕсли;
КонецФункции

&НаСервере
Функция НайтиСтрокуТабличнойЧастиВРазличиях(РазличияТабличнойЧасти, НомерСтроки)
	Если РазличияТабличнойЧасти = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого СтрокаТабличнойЧастиРазличия Из РазличияТабличнойЧасти	Цикл
		Если СтрокаТабличнойЧастиРазличия.НомерСтрокиВВерсииПослеИзменения = НомерСтроки 
			И (СтрокаТабличнойЧастиРазличия.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Добавление
				Или СтрокаТабличнойЧастиРазличия.ВидИзмененияСтроки = ВидИзмененияСтрокиДанных.Изменение) Тогда
			Возврат СтрокаТабличнойЧастиРазличия;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ИзменилосьЗначениеПоляТабличнойЧасти(СтрокаТабличнойЧастиРазличия, ИмяПоля)
	Перем ЗначениеСвойства, РазличияПоля;
	Если СтрокаТабличнойЧастиРазличия = Неопределено
		Или СтрокаТабличнойЧастиРазличия.ВидИзмененияСтроки <> ВидИзмененияСтрокиДанных.Изменение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтрокаТабличнойЧастиРазличия.Свойство("Поля", РазличияПоля) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РазличияПоля.Свойство(ИмяПоля, ЗначениеСвойства);
КонецФункции

&НаСервере
Функция ПолучитьИмяФормы()
	Перем МетаданныеДанных;
	МетаданныеДанных = Параметры.Данные.Метаданные();
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) Тогда
		Возврат МетаданныеДанных.ПолноеИмя() + ".ФормаЗаписи";
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеДанных) Тогда
		Возврат МетаданныеДанных.ПолноеИмя() + ".ФормаКонстант";
	Иначе
		Возврат МетаданныеДанных.ПолноеИмя() + ".ФормаОбъекта";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьИмяФормыПоМетаданным(ВидФормы)
	Возврат Параметры.Данные.Метаданные().ПолноеИмя() + "." + ВидФормы;
КонецФункции

&НаКлиенте
Процедура ПерейтиНаВерсию(Команда)
	ОткрытьФорму(ПолучитьИмяФормы(), Новый Структура(
		"Ключ, НомерВерсииПереходаНаВерсиюИсторииДанных",
		Параметры.Данные,
		Параметры.НомерВерсии));

КонецПроцедуры

&НаКлиенте
Процедура СравнитьСПредыдущей(Команда)
	Перем НомерВерсииПослеИзменения, НомерВерсииДоИзменения;
	НомерВерсииПослеИзменения = Параметры.НомерВерсии;
	НомерВерсииДоИзменения = ПолучитьНомерПредыдущейВерсии(НомерВерсииПослеИзменения);
	Если НомерВерсииДоИзменения = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Предыдущая версия отсутствует';SYS='DataHistory.PreviousVersionNotExists'", "ru"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПолучитьИмяФормыПоМетаданным("ФормаРазличийВерсийИсторииДанных"),
		Новый Структура(
			"Данные, НомерВерсииПослеИзменения, НомерВерсииДоИзменения",
			Параметры.Данные,
			НомерВерсииПослеИзменения,
			НомерВерсииДоИзменения));
			
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСТекущей(Команда)
	Перем НомерВерсииДоИзменения, НомерТекущейВерсии;
	НомерВерсииДоИзменения = Параметры.НомерВерсии;
	НомерТекущейВерсии = ПолучитьНомерТекущейВерсии();
	Если НомерТекущейВерсии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НомерТекущейВерсии = НомерВерсииДоИзменения Тогда
		ПоказатьПредупреждение(,НСтр("ru='Версия является текущей';SYS='DataHistory.VersionIsLast'", "ru"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПолучитьИмяФормыПоМетаданным("ФормаРазличийВерсийИсторииДанных"),
		Новый Структура(
			"Данные, НомерВерсииПослеИзменения, НомерВерсииДоИзменения",
			Параметры.Данные,
			НомерТекущейВерсии,
			НомерВерсииДоИзменения));

КонецПроцедуры

&НаСервере
Функция ПолучитьНомерПредыдущейВерсии(НомерВерсии)
	Перем БезВерсииУдаления, Результат, НомерПредыдущейВерсии;
	
	БезВерсииУдаления = Новый Массив();
	БезВерсииУдаления.Добавить(ВидИзмененияДанных.Добавление);
	БезВерсииУдаления.Добавить(ВидИзмененияДанных.Изменение);
	Результат = ИсторияДанных.ВыбратьВерсии(
		Новый Структура(
			"Данные, ВидИзмененияДанных",
			Параметры.Данные,
			БезВерсииУдаления),
		"НомерВерсии",
		"НомерВерсии Возр");
	Для Каждого ПроверяемыйНомерВерсии Из Результат Цикл
		Если ПроверяемыйНомерВерсии[0] = НомерВерсии Тогда
			Возврат НомерПредыдущейВерсии;
		КонецЕсли;
		НомерПредыдущейВерсии = ПроверяемыйНомерВерсии[0];
	КонецЦикла;
	Возврат НомерПредыдущейВерсии;
КонецФункции

&НаСервере
Функция ПолучитьНомерТекущейВерсии()
	Перем БезВерсииУдаления, Результат;
	БезВерсииУдаления = Новый Массив();
	БезВерсииУдаления.Добавить(ВидИзмененияДанных.Добавление);
	БезВерсииУдаления.Добавить(ВидИзмененияДанных.Изменение);
	Результат = ИсторияДанных.ВыбратьВерсии(
		Новый Структура(
			"Данные, ВидИзмененияДанных",
			Параметры.Данные,
			БезВерсииУдаления),
		"НомерВерсии",
		"НомерВерсии Убыв",
		1);
			
	Для Каждого ПроверяемыйНомерВерсии Из Результат Цикл
		Возврат ПроверяемыйНомерВерсии[0];
	КонецЦикла;
	Возврат Неопределено
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеДанных(МетаданныеДанных, Данные)
	Перем Представление, Разделитель;
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеДанных) Тогда
		Представление = "";
	
		Если МетаданныеДанных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Если МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора
				Или МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Секунда Тогда
				Представление = МетаданныеДанных.СтандартныеРеквизиты.Период.Представление() + "=" + Строка(Данные.Период);
			Иначе
				Представление = МетаданныеДанных.СтандартныеРеквизиты.Период.Представление() + "=" + Формат(Данные.Период, "ДЛФ=Д");
			КонецЕсли;
		КонецЕсли;
		
		Если МетаданныеДанных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			Представление = Представление + МетаданныеДанных.СтандартныеРеквизиты.Регистратор.Представление() + "=" + Строка(Данные.Регистратор);
		КонецЕсли;
		
		Для Каждого Измерение Из МетаданныеДанных.Измерения Цикл
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			Представление = Представление + Строка(Измерение) + "=" + Строка(Данные[Измерение.Имя]);
		КонецЦикла;
		
		Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			Если 	ОбщийРеквизит.РазделениеДанных <> Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять
				Или ОбщийРеквизит.ИспользованиеРазделяемыхДанных <> Метаданные.СвойстваОбъектов.ИспользованиеРазделяемыхДанныхОбщегоРеквизита.НезависимоИСовместно Тогда
				Продолжить;
			КонецЕсли;
			
			Разделитель = ОбщийРеквизит.Content.Найти(МетаданныеДанных);
			Если 		Разделитель = Неопределено
				Или 	Разделитель.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
				Или (Разделитель.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
					И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
				Продолжить;
			КонецЕсли;

			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + ";"
			КонецЕсли;
			
			Представление = Представление + Строка(ОбщийРеквизит) + "=" + Строка(Данные[ОбщийРеквизит.Имя]);
		КонецЦикла;
		
		Возврат Представление;
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеДанных) Тогда
		Возврат МетаданныеДанных.Представление();
	Иначе
		Возврат Строка(Данные);
	КонецЕсли;
КонецФункции

