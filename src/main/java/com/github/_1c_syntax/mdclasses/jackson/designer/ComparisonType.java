//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.05.20 at 09:46:06 PM KRAT 
//


package com.github._1c_syntax.mdclasses.jackson.designer;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.JsonProperty;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ComparisonType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ComparisonType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Equal"/&gt;
 *     &lt;enumeration value="NotEqual"/&gt;
 *     &lt;enumeration value="Less"/&gt;
 *     &lt;enumeration value="LessOrEqual"/&gt;
 *     &lt;enumeration value="Greater"/&gt;
 *     &lt;enumeration value="GreaterOrEqual"/&gt;
 *     &lt;enumeration value="Interval"/&gt;
 *     &lt;enumeration value="IntervalIncludingBounds"/&gt;
 *     &lt;enumeration value="IntervalIncludingLowerBound"/&gt;
 *     &lt;enumeration value="IntervalIncludingUpperBound"/&gt;
 *     &lt;enumeration value="Contains"/&gt;
 *     &lt;enumeration value="InList"/&gt;
 *     &lt;enumeration value="InListByHierarchy"/&gt;
 *     &lt;enumeration value="NotInList"/&gt;
 *     &lt;enumeration value="NotInListByHierarchy"/&gt;
 *     &lt;enumeration value="InHierarchy"/&gt;
 *     &lt;enumeration value="NotInHierarchy"/&gt;
 *     &lt;enumeration value="NotContains"/&gt;
 *     &lt;enumeration value="BeginsWith"/&gt;
 *     &lt;enumeration value="NotBeginsWith"/&gt;
 *     &lt;enumeration value="Like"/&gt;
 *     &lt;enumeration value="NotLike"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType("ComparisonType", namespace = "http://v8.1c.ru/8.1/data/enterprise")
@XmlEnum
public enum ComparisonType {

    @JsonProperty("Equal")
    EQUAL("Equal"),
    @JsonProperty("NotEqual")
    NOT_EQUAL("NotEqual"),
    @JsonProperty("Less")
    LESS("Less"),
    @JsonProperty("LessOrEqual")
    LESS_OR_EQUAL("LessOrEqual"),
    @JsonProperty("Greater")
    GREATER("Greater"),
    @JsonProperty("GreaterOrEqual")
    GREATER_OR_EQUAL("GreaterOrEqual"),
    @JsonProperty("Interval")
    INTERVAL("Interval"),
    @JsonProperty("IntervalIncludingBounds")
    INTERVAL_INCLUDING_BOUNDS("IntervalIncludingBounds"),
    @JsonProperty("IntervalIncludingLowerBound")
    INTERVAL_INCLUDING_LOWER_BOUND("IntervalIncludingLowerBound"),
    @JsonProperty("IntervalIncludingUpperBound")
    INTERVAL_INCLUDING_UPPER_BOUND("IntervalIncludingUpperBound"),
    @JsonProperty("Contains")
    CONTAINS("Contains"),
    @JsonProperty("InList")
    IN_LIST("InList"),
    @JsonProperty("InListByHierarchy")
    IN_LIST_BY_HIERARCHY("InListByHierarchy"),
    @JsonProperty("NotInList")
    NOT_IN_LIST("NotInList"),
    @JsonProperty("NotInListByHierarchy")
    NOT_IN_LIST_BY_HIERARCHY("NotInListByHierarchy"),
    @JsonProperty("InHierarchy")
    IN_HIERARCHY("InHierarchy"),
    @JsonProperty("NotInHierarchy")
    NOT_IN_HIERARCHY("NotInHierarchy"),
    @JsonProperty("NotContains")
    NOT_CONTAINS("NotContains"),
    @JsonProperty("BeginsWith")
    BEGINS_WITH("BeginsWith"),
    @JsonProperty("NotBeginsWith")
    NOT_BEGINS_WITH("NotBeginsWith"),
    @JsonProperty("Like")
    LIKE("Like"),
    @JsonProperty("NotLike")
    NOT_LIKE("NotLike");
    private final String value;

    ComparisonType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ComparisonType fromValue(String v) {
        for (ComparisonType c: ComparisonType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
