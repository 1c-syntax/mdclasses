//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.05.20 at 09:46:06 PM KRAT 
//


package com.github._1c_syntax.mdclasses.jabx.original;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for InformationRegisterPeriodicity.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="InformationRegisterPeriodicity"&gt;
 *   &lt;restriction base="{http://v8.1c.ru/8.3/xcf/enums}BaseEnumType"&gt;
 *     &lt;enumeration value="Nonperiodical"/&gt;
 *     &lt;enumeration value="RecorderPosition"/&gt;
 *     &lt;enumeration value="Second"/&gt;
 *     &lt;enumeration value="Day"/&gt;
 *     &lt;enumeration value="Month"/&gt;
 *     &lt;enumeration value="Quarter"/&gt;
 *     &lt;enumeration value="Year"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "InformationRegisterPeriodicity", namespace = "http://v8.1c.ru/8.3/xcf/enums")
@XmlEnum
public enum InformationRegisterPeriodicity {

    @XmlEnumValue("Nonperiodical")
    NONPERIODICAL("Nonperiodical"),
    @XmlEnumValue("RecorderPosition")
    RECORDER_POSITION("RecorderPosition"),
    @XmlEnumValue("Second")
    SECOND("Second"),
    @XmlEnumValue("Day")
    DAY("Day"),
    @XmlEnumValue("Month")
    MONTH("Month"),
    @XmlEnumValue("Quarter")
    QUARTER("Quarter"),
    @XmlEnumValue("Year")
    YEAR("Year");
    private final String value;

    InformationRegisterPeriodicity(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static InformationRegisterPeriodicity fromValue(String v) {
        for (InformationRegisterPeriodicity c: InformationRegisterPeriodicity.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
