#!/bin/bash

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è CI
if [ -n "$GITHUB_HEAD_REF" ]; then
    # –í GitHub Actions
    OLD_BRANCH=${1:-"develop"}
    NEW_BRANCH=${2:-"$GITHUB_HEAD_REF"}
else
    # –õ–æ–∫–∞–ª—å–Ω–æ
    OLD_BRANCH=${1:-"develop"}
    NEW_BRANCH=${2:-$(git branch --show-current)}
fi

RESULTS_DIR="benchmark-results"
BUILD_DIR="build/libs"

echo "üî® –ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MDClasses"
echo "================================================"

rm -rf $RESULTS_DIR
mkdir -p $RESULTS_DIR

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º JAR —Ñ–∞–π–ª
is_jar_file() {
    local param=$1
    if [[ "$param" == *.jar ]] && [[ -f "$param" ]]; then
        return 0  # true - —ç—Ç–æ —Ñ–∞–π–ª JAR
    else
        return 1  # false - –Ω–µ JAR —Ñ–∞–π–ª
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤–µ—Ç–∫–∞ Git
is_git_branch() {
    local param=$1
    if git rev-parse --verify "$param" >/dev/null 2>&1; then
        return 0  # true - —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–µ—Ç–∫–∞
    else
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ
        if git ls-remote --heads origin "$param" | grep -q "$param"; then
            return 0
        else
            return 1  # false - –Ω–µ –≤–µ—Ç–∫–∞
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ JAR —Ñ–∞–π–ª–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
find_benchmark_jar() {
    local build_dir=$1
    find "$build_dir" -name "*jmh*.jar" -type f | head -1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ JAR —Ñ–∞–π–ª–∞
use_existing_jar() {
    local jar_path=$1
    local version_name=$2

    echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π JAR —Ñ–∞–π–ª –¥–ª—è $version_name..."
    echo "   –§–∞–π–ª: $jar_path"

    if [[ ! -f "$jar_path" ]]; then
        echo "‚ùå JAR —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $jar_path"
        exit 1
    fi

    cp "$jar_path" "$RESULTS_DIR/$version_name.jar"
    echo "   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: $RESULTS_DIR/$version_name.jar"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ –∏–∑ –≤–µ—Ç–∫–∏ Git
build_from_branch() {
    local branch=$1
    local version_name=$2

    echo "üì¶ –°–±–æ—Ä–∫–∞ $version_name –∏–∑ –≤–µ—Ç–∫–∏ $branch..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
    if ! git rev-parse --verify "$branch" >/dev/null 2>&1; then
        echo "‚ùå –í–µ—Ç–∫–∞ $branch –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        echo "   –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ç–∫–∏:"
        git branch -a | head -10
        exit 1
    fi

    git checkout "$branch" --quiet

    echo "   –°–±–æ—Ä–∫–∞ Gradle..."
    ./gradlew clean jmhJar --quiet

    git log -1 --oneline > "$RESULTS_DIR/$version_name-commit.txt"
    git rev-parse HEAD > "$RESULTS_DIR/$version_name-hash.txt"

    sleep 2

    local jar_file
    jar_file=$(find_benchmark_jar "$BUILD_DIR")

    if [[ -z "$jar_file" ]]; then
        echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JAR —Ñ–∞–π–ª –≤ $BUILD_DIR"
        ls -la "$BUILD_DIR"/*.jar 2>/dev/null || echo "      –ù–µ—Ç JAR —Ñ–∞–π–ª–æ–≤"
        exit 1
    fi

    echo "   ‚úÖ –ù–∞–π–¥–µ–Ω JAR: $(basename "$jar_file")"
    cp "$jar_file" "$RESULTS_DIR/$version_name.jar"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
echo "üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..."
echo "   –ü—Ä–æ—à–ª–∞—è –≤–µ—Ä—Å–∏—è: $OLD_BRANCH"
echo "   –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $NEW_BRANCH"

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
if is_jar_file "$OLD_BRANCH"; then
    use_existing_jar "$OLD_BRANCH" "old-version"
    OLD_SOURCE="JAR —Ñ–∞–π–ª: $(basename "$OLD_BRANCH")"
elif is_git_branch "$OLD_BRANCH"; then
    build_from_branch "$OLD_BRANCH" "old-version"
    OLD_SOURCE="–í–µ—Ç–∫–∞: $OLD_BRANCH ($(cat $RESULTS_DIR/old-version-commit.txt))"
else
    echo "‚ùå –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ JAR —Ñ–∞–π–ª–æ–º, –Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ç–∫–æ–π: $OLD_BRANCH"
    echo "   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "     ./benchmark-compare.sh <old_jar_file> <new_branch>"
    echo "     ./benchmark-compare.sh <old_branch> <new_branch>"
    echo "     ./benchmark-compare.sh <old_branch> <new_jar_file>"
    echo "     ./benchmark-compare.sh <old_jar_file> <new_jar_file>"
    exit 1
fi

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
if is_jar_file "$NEW_BRANCH"; then
    use_existing_jar "$NEW_BRANCH" "new-version"
    NEW_SOURCE="JAR —Ñ–∞–π–ª: $(basename "$NEW_BRANCH")"
elif is_git_branch "$NEW_BRANCH"; then
    build_from_branch "$NEW_BRANCH" "new-version"
    NEW_SOURCE="–í–µ—Ç–∫–∞: $NEW_BRANCH ($(cat $RESULTS_DIR/new-version-commit.txt))"
else
    echo "‚ùå –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ JAR —Ñ–∞–π–ª–æ–º, –Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ç–∫–æ–π: $NEW_BRANCH"
    exit 1
fi

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
echo "–ü—Ä–æ—à–ª–∞—è –≤–µ—Ä—Å–∏—è: $OLD_SOURCE" > "$RESULTS_DIR/sources.txt"
echo "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $NEW_SOURCE" >> "$RESULTS_DIR/sources.txt"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ JAR —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
check_jar_exists() {
    local jar_path=$1
    local version_name=$2

    if [[ ! -f "$jar_path" ]]; then
        echo "‚ùå JAR —Ñ–∞–π–ª –¥–ª—è $version_name –Ω–µ –Ω–∞–π–¥–µ–Ω: $jar_path"
        exit 1
    fi
}

check_jar_exists "$RESULTS_DIR/old-version.jar" "–ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏"
check_jar_exists "$RESULTS_DIR/new-version.jar" "–Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏"

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –≤–µ—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
if ! is_jar_file "$NEW_BRANCH" && is_git_branch "$NEW_BRANCH"; then
    echo "üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–µ—Ç–∫–µ $NEW_BRANCH..."
    git checkout "$NEW_BRANCH" --quiet
fi

echo ""
echo "üéØ –ò–°–¢–û–ß–ù–ò–ö–ò –í–ï–†–°–ò–ô:"
echo "   –ü—Ä–æ—à–ª–∞—è –≤–µ—Ä—Å–∏—è: $OLD_SOURCE"
echo "   –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $NEW_SOURCE"
echo ""

echo "üìä –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏..."
java -jar "$RESULTS_DIR/old-version.jar" -prof com.github._1c_syntax.bsl.mdclasses.benchmark.MemoryProfiler -rf json -rff "$RESULTS_DIR/old-results.json"

echo "üìä –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏..."
java -jar "$RESULTS_DIR/new-version.jar" -prof com.github._1c_syntax.bsl.mdclasses.benchmark.MemoryProfiler -rf json -rff "$RESULTS_DIR/new-results.json"

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
analyze_results() {
    local old_file="$1"
    local new_file="$2"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
    if [[ -f "$RESULTS_DIR/sources.txt" ]]; then
        source . "$RESULTS_DIR/sources.txt"
    else
        OLD_SOURCE="–í–µ—Ç–∫–∞: $OLD_BRANCH"
        NEW_SOURCE="–í–µ—Ç–∫–∞: $NEW_BRANCH"
    fi

    echo "üìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + –ü–∞–º—è—Ç—å)"
    echo "==================================================="

    if ! command -v jq &> /dev/null; then
        echo "‚ÑπÔ∏è  –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jq: sudo apt-get install jq"
        echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª–∞—Ö"
        return
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON —Ñ–∞–π–ª–æ–≤
    if [[ ! -f "$old_file" || ! -f "$new_file" ]]; then
        echo "‚ùå –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return
    fi

    echo ""
    echo "üöÄ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (–≤—Ä–µ–º—è, –º–µ–Ω—å—à–µ - –ª—É—á—à–µ):"
    echo "---------------------------------------------------"
    echo "–ë–µ–Ω—á–º–∞—Ä–∫ | –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è | –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è | –ò–∑–º–µ–Ω–µ–Ω–∏–µ"
    echo "---------|---------------|--------------|----------"

    # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    jq -r '.[] | select(.benchmark) | "\(.benchmark)|\(.primaryMetric.score)|\(.primaryMetric.scoreUnit)"' "$old_file" > "$RESULTS_DIR/old-perf.txt"
    jq -r '.[] | select(.benchmark) | "\(.benchmark)|\(.primaryMetric.score)|\(.primaryMetric.scoreUnit)"' "$new_file" > "$RESULTS_DIR/new-perf.txt"

    # –°–æ–∑–¥–∞–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
    declare -A old_scores
    declare -A new_scores
    declare -A units

    # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    while IFS='|' read -r benchmark score unit; do
        if [[ -n "$benchmark" && -n "$score" ]]; then
            old_scores["$benchmark"]="$score"
            units["$benchmark"]="$unit"
        fi
    done < "$RESULTS_DIR/old-perf.txt"

    # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    while IFS='|' read -r benchmark score unit; do
        if [[ -n "$benchmark" && -n "$score" ]]; then
            new_scores["$benchmark"]="$score"
        fi
    done < "$RESULTS_DIR/new-perf.txt"

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    for benchmark in "${!old_scores[@]}"; do
        old_score="${old_scores[$benchmark]}"
        new_score="${new_scores[$benchmark]}"
        unit="${units[$benchmark]}"

        if [[ -n "$new_score" ]]; then
            short_name=$(echo "$benchmark" | sed 's/.*\.//')

            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            if command -v bc &> /dev/null && [[ "$old_score" != "0" ]]; then
                change=$(echo "scale=2; (($old_score - $new_score) / $old_score) * 100" | bc 2>/dev/null)

                if [[ -n "$change" ]]; then
                    if (( $(echo "$change > 0" | bc -l 2>/dev/null) )); then
                        change_display="+${change}% ‚úÖ"
                    elif (( $(echo "$change < 0" | bc -l 2>/dev/null) )); then
                        change_display="${change}% ‚ùå"
                    else
                        change_display="${change}% ‚ûñ"
                    fi
                else
                    change_display="N/A"
                fi
            else
                change_display="(—É—Å—Ç–∞–Ω–æ–≤–∏ bc)"
            fi

            printf "%-30s | %-10.2f %-2s | %-10.2f %-2s | %-10s\n" \
                "$short_name" "$old_score" "$unit" "$new_score" "$unit" "$change_display"
        fi
    done

    # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø–∞–º—è—Ç–∏
    echo ""
    echo "üß† –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–ò (–º–µ–Ω—å—à–µ - –ª—É—á—à–µ):"
    echo "------------------------------------------------"
    echo "–ú–µ—Ç—Ä–∏–∫–∞ –ø–∞–º—è—Ç–∏ | –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è | –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è | –ò–∑–º–µ–Ω–µ–Ω–∏–µ"
    echo "--------------|---------------|--------------|----------"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
    jq -r '.[] | select(.benchmark) | .benchmark as $bench | .secondaryMetrics | to_entries[] | "\($bench)|\(.key)|\(.value.score)|\(.value.scoreUnit)"' "$old_file" | grep -E "(memory|gc)" > "$RESULTS_DIR/old-memory.txt" || true

    jq -r '.[] | select(.benchmark) | .benchmark as $bench | .secondaryMetrics | to_entries[] | "\($bench)|\(.key)|\(.value.score)|\(.value.scoreUnit)"' "$new_file" | grep -E "(memory|gc)" > "$RESULTS_DIR/new-memory.txt" || true

    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏ –ø–æ –≤—Å–µ–º –±–µ–Ω—á–º–∞—Ä–∫–∞–º
    declare -A old_memory_metrics
    declare -A new_memory_metrics
    declare -A memory_units

    # –°—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
    while IFS='|' read -r benchmark metric score unit; do
        if [[ -n "$metric" && -n "$score" ]]; then
            old_memory_metrics["$metric"]=$(echo "${old_memory_metrics["$metric"]:-0} + $score" | bc -l 2>/dev/null || echo "0")
            memory_units["$metric"]="$unit"
        fi
    done < "$RESULTS_DIR/old-memory.txt"

    # –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
    while IFS='|' read -r benchmark metric score unit; do
        if [[ -n "$metric" && -n "$score" ]]; then
            new_memory_metrics["$metric"]=$(echo "${new_memory_metrics["$metric"]:-0} + $score" | bc -l 2>/dev/null || echo "0")
        fi
    done < "$RESULTS_DIR/new-memory.txt"

    # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
    important_metrics=(
        "memory.heap.used"
        "memory.total.used"
        "gc.collections"
        "gc.time"
    )

    for metric in "${important_metrics[@]}"; do
        if [[ -n "${old_memory_metrics[$metric]}" && -n "${new_memory_metrics[$metric]}" ]]; then
            old_val="${old_memory_metrics[$metric]}"
            new_val="${new_memory_metrics[$metric]}"
            unit="${memory_units[$metric]}"

            # –î–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
            bench_count=$(jq -r '[.[] | select(.benchmark)] | length' "$old_file")
            if [[ "$bench_count" -gt 0 ]]; then
                old_val=$(echo "scale=2; $old_val / $bench_count" | bc -l 2>/dev/null || echo "$old_val")
                new_val=$(echo "scale=2; $new_val / $bench_count" | bc -l 2>/dev/null || echo "$new_val")
            fi

            if command -v bc &> /dev/null && [[ "$old_val" != "0" ]]; then
                change=$(echo "scale=2; (($old_val - $new_val) / $old_val) * 100" | bc 2>/dev/null)

                # –î–ª—è –ø–∞–º—è—Ç–∏ –∏ GC —É–ª—É—á—à–µ–Ω–∏–µ - —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                if [[ "$metric" == memory* ]]; then
                    if (( $(echo "$change > 0" | bc -l 2>/dev/null) )); then
                        change_display="+${change}% ‚úÖ"
                    elif (( $(echo "$change < 0" | bc -l 2>/dev/null) )); then
                        change_display="${change}% ‚ùå"
                    else
                        change_display="${change}% ‚ûñ"
                    fi
                else # GC –º–µ—Ç—Ä–∏–∫–∏
                    if (( $(echo "$change < 0" | bc -l 2>/dev/null) )); then
                        change_display="${change}% ‚úÖ"
                    elif (( $(echo "$change > 0" | bc -l 2>/dev/null) )); then
                        change_display="+${change}% ‚ùå"
                    else
                        change_display="${change}% ‚ûñ"
                    fi
                fi
            else
                change_display="N/A"
            fi

            printf "%-30s | %-10.2f %-2s | %-10.2f %-2s | %-10s\n" \
                "$metric" "$old_val" "$unit" "$new_val" "$unit" "$change_display"
        fi
    done

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    rm -f "$RESULTS_DIR/old-perf.txt" "$RESULTS_DIR/new-perf.txt" \
          "$RESULTS_DIR/old-memory.txt" "$RESULTS_DIR/new-memory.txt"
}

# –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ jq –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
simple_analysis() {
    local old_file="$1"
    local new_file="$2"

    echo ""
    echo "üìä –ü–†–û–°–¢–û–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í"
    echo "============================="

    if command -v jq &> /dev/null; then
        echo "–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
        jq -r '.[] | "  \(.benchmark | split(".")[-1]): \(.primaryMetric.score) \(.primaryMetric.scoreUnit)"' "$old_file" 2>/dev/null | head -5

        echo ""
        echo "–ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏ (–ø–µ—Ä–≤—ã–µ 5):"
        jq -r '.[] | .secondaryMetrics | to_entries[] | select(.key | test("memory|gc")) | "  \(.key): \(.value.score) \(.value.scoreUnit)"' "$old_file" 2>/dev/null | head -5
    else
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    echo "üìà –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –°–†–ê–í–ù–ï–ù–ò–Ø MDClasses" > "$RESULTS_DIR/comparison-report.txt"
    echo "===================================" >> "$RESULTS_DIR/comparison-report.txt"
    echo "–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è: $OLD_BRANCH ($(cat $RESULTS_DIR/old-version-commit.txt))" >> "$RESULTS_DIR/comparison-report.txt"
    echo "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $NEW_BRANCH ($(cat $RESULTS_DIR/new-version-commit.txt))" >> "$RESULTS_DIR/comparison-report.txt"
    echo "" >> "$RESULTS_DIR/comparison-report.txt"

    # –ü—Ä–æ–±—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if analyze_results "$RESULTS_DIR/old-results.json" "$RESULTS_DIR/new-results.json" >> "$RESULTS_DIR/comparison-report.txt" 2>/dev/null; then
        echo "‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω"
    else
        echo "‚ö†Ô∏è  –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π"
        simple_analysis "$RESULTS_DIR/old-results.json" "$RESULTS_DIR/new-results.json" >> "$RESULTS_DIR/comparison-report.txt"
    fi
}

generate_report

echo ""
echo "‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üìÑ –û—Ç—á–µ—Ç: $RESULTS_DIR/comparison-report.txt"
echo "üìä –î–∞–Ω–Ω—ã–µ: $RESULTS_DIR/old-results.json –∏ $RESULTS_DIR/new-results.json"
echo "üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: $OLD_SOURCE ‚Üí $NEW_SOURCE"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ –∫–æ–Ω—Å–æ–ª–∏
echo ""
echo "üìã –ö–†–ê–¢–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:"
analyze_results "$RESULTS_DIR/old-results.json" "$RESULTS_DIR/new-results.json" 2>/dev/null || \
simple_analysis "$RESULTS_DIR/old-results.json" "$RESULTS_DIR/new-results.json"
